/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package megacasting.view;

import java.awt.CardLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import megacasting.dao.DomaineDAO;
import megacasting.dao.MetierDAO;
import megacasting.dao.OffreDAO;
import megacasting.dao.TypeContratDAO;
import megacasting.entite.Domaine;
import megacasting.entite.Metier;
import megacasting.entite.Offre;
import megacasting.entite.TypeContrat;

/**
 *
 * @author theodore
 */
public class ParamsForm extends javax.swing.JPanel {

    private MainJFrame mainJFrame;

    public ParamsForm(MainJFrame mainJFrame) {
        this.mainJFrame = mainJFrame;
        initComponents();        
        
        refreshListDomaine();
        refreshComboBoxDomaine();
        refreshListMetier();
        refreshListTypeContrat();
    }
    
    private void refreshListTypeContrat() {
        DefaultListModel<TypeContrat> modelListTypeContrat = new DefaultListModel<>();
        
        // Liste de tous les types de contrat
        ArrayList<TypeContrat> typeContrats = TypeContratDAO.lister(mainJFrame.cnx);

        // Pour chaque type de contrat
        for (TypeContrat tc : typeContrats) {
            // On l'ajoute à la liste
            modelListTypeContrat.addElement(tc);
        }
        listTypeContrat.setModel(modelListTypeContrat);
    }
    
    // Liste des métiers d'un domaine d
    private void refreshListMetier(Domaine d) {
        DefaultListModel<Metier> modelListMetier = new DefaultListModel<>();
        
        // Liste des métiers du domaine d
        ArrayList<Metier> metiers = MetierDAO.lister(mainJFrame.cnx, d);
        
        // Pour chaque métier du domaine d
        for (Metier m : metiers) {
            // On l'ajoute à la liste
            modelListMetier.addElement(m);
        }
        listMetier.setModel(modelListMetier);
    }
    
    // Liste de tous les métiers
    private void refreshListMetier(){
        
        // Si la checkbox domaine est cochée
        if (checkBoxDomaine.isSelected()) {
            // On récupère le domaine sélectionné
            Domaine d = (Domaine) comboBoxDomaine.getSelectedItem();
            
            // On refresh la liste des métiers du domaine sélectionné
            refreshListMetier(d);
        }
        else {
            // On vide la liste des métiers d'un domaine
            refreshListMetier(null);
        }
    }
    
    // Liste de tous les domaines
    private void refreshListDomaine() {
        DefaultListModel<Domaine> modelListDomaine = new DefaultListModel<>();
        
        // Liste de tous les domaines
        ArrayList<Domaine> domaines = DomaineDAO.lister(mainJFrame.cnx);

        // Pour chaque domaine
        for (Domaine d : domaines) {
            // On m'ajoute à la liste
            modelListDomaine.addElement(d);
        }
        listDomaine.setModel(modelListDomaine);
    }
    
    private void refreshComboBoxDomaine() {
        DefaultComboBoxModel<Domaine> modelComboBoxDomaine = new DefaultComboBoxModel<>();
        
        // Liste de tous les domaines
        ArrayList<Domaine> domaines = DomaineDAO.lister(mainJFrame.cnx);
        
        // Pour chaque domaine
        for (Domaine d : domaines) {
            // On l'ajoute à la comboBox
            modelComboBoxDomaine.addElement(d);
        }
        comboBoxDomaine.setModel(modelComboBoxDomaine);
        
        // Selectionne vide
        comboBoxDomaine.setSelectedIndex(-1);
    }
    
    /**
     * Vide les labels et textField du panneau type de contrat
     */
    private void resetTypeContrat() {
        textFieldLibelleTypeContrat.setText("");
        labelErrorLibelleTypeContrat.setText("");
        labelErrorValiderTypeContrat.setText("");
        labelErrorSupprimerTypeContrat.setText("");
    }
    
    /**
     * Vide les labels et textField du panneau domaine
     */
    private void resetDomaine() {
        textFieldLibelleDomaine.setText("");
        labelErrorLibelleDomaine.setText("");
        labelErrorValiderDomaine.setText("");
    }
    
    /**
     * Vide les labels et textField du panneau métier
     */
    private void resetMetier() {
        textFieldLibelleMetier.setText("");
        labelErrorLibelleMetier.setText("");
        labelErrorValiderMetier.setText("");
    }
    
    /**
     * Creates new form ParamsForm
     */
    public ParamsForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonRetour = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabbedPanel = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        labelLibelleDomaine = new javax.swing.JLabel();
        textFieldLibelleDomaine = new javax.swing.JTextField();
        labelDomaine = new javax.swing.JLabel();
        buttonValiderDomaine = new javax.swing.JButton();
        buttonSupprimerDomaine = new javax.swing.JButton();
        buttonEffacerDomaine = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listDomaine = new javax.swing.JList();
        labelErrorValiderDomaine = new javax.swing.JLabel();
        labelErrorLibelleDomaine = new javax.swing.JLabel();
        labelErrorSupprimerDomaine = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        buttonEffacerMetier = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listMetier = new javax.swing.JList();
        labelMetier = new javax.swing.JLabel();
        checkBoxDomaine = new javax.swing.JCheckBox();
        buttonSupprimerMetier = new javax.swing.JButton();
        labelLibelleMetier = new javax.swing.JLabel();
        textFieldLibelleMetier = new javax.swing.JTextField();
        buttonValiderMetier = new javax.swing.JButton();
        comboBoxDomaine = new javax.swing.JComboBox();
        labelErrorValiderMetier = new javax.swing.JLabel();
        labelErrorLibelleMetier = new javax.swing.JLabel();
        labelErrorSupprimerMetier = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        typeContratLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listTypeContrat = new javax.swing.JList();
        buttonSupprimerTypeContrat = new javax.swing.JButton();
        buttonEffacerTypeContrat = new javax.swing.JButton();
        buttonValiderTypeContrat = new javax.swing.JButton();
        labelLibelleTypeContrat = new javax.swing.JLabel();
        textFieldLibelleTypeContrat = new javax.swing.JTextField();
        labelErrorLibelleTypeContrat = new javax.swing.JLabel();
        labelErrorValiderTypeContrat = new javax.swing.JLabel();
        labelErrorSupprimerTypeContrat = new javax.swing.JLabel();

        buttonRetour.setText("Accueil");
        buttonRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRetourActionPerformed(evt);
            }
        });

        labelLibelleDomaine.setText("Libelle :");

        labelDomaine.setText("Domaine");

        buttonValiderDomaine.setText("Valider");
        buttonValiderDomaine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonValiderDomaineActionPerformed(evt);
            }
        });

        buttonSupprimerDomaine.setText("Supprimer");
        buttonSupprimerDomaine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSupprimerDomaineActionPerformed(evt);
            }
        });

        buttonEffacerDomaine.setText("Effacer");
        buttonEffacerDomaine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEffacerDomaineActionPerformed(evt);
            }
        });

        listDomaine.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listDomaine.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listDomaineValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listDomaine);

        labelErrorValiderDomaine.setForeground(new java.awt.Color(255, 0, 0));

        labelErrorLibelleDomaine.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(340, 340, 340)
                        .addComponent(labelErrorLibelleDomaine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(labelErrorValiderDomaine, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 191, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(labelErrorSupprimerDomaine, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(59, 59, 59)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(buttonSupprimerDomaine, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                        .addComponent(labelDomaine, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(labelLibelleDomaine)
                            .addGap(18, 18, 18)
                            .addComponent(textFieldLibelleDomaine, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(buttonEffacerDomaine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonValiderDomaine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap(266, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(labelErrorValiderDomaine, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelErrorLibelleDomaine, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 182, Short.MAX_VALUE)
                .addComponent(labelErrorSupprimerDomaine, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(35, 35, 35)
                    .addComponent(labelDomaine)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(43, 43, 43)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelLibelleDomaine)
                                .addComponent(textFieldLibelleDomaine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonValiderDomaine)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonEffacerDomaine)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(buttonSupprimerDomaine)
                    .addContainerGap(140, Short.MAX_VALUE)))
        );

        tabbedPanel.addTab("Domaine", jPanel2);

        buttonEffacerMetier.setText("Effacer");
        buttonEffacerMetier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEffacerMetierActionPerformed(evt);
            }
        });

        listMetier.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listMetier.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listMetierValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listMetier);

        labelMetier.setText("Métier");

        checkBoxDomaine.setText("Domaine :");
        checkBoxDomaine.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkBoxDomaineStateChanged(evt);
            }
        });

        buttonSupprimerMetier.setText("Supprimer");
        buttonSupprimerMetier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSupprimerMetierActionPerformed(evt);
            }
        });

        labelLibelleMetier.setText("Libelle : ");

        buttonValiderMetier.setText("Valider");
        buttonValiderMetier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonValiderMetierActionPerformed(evt);
            }
        });

        comboBoxDomaine.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxDomaineItemStateChanged(evt);
            }
        });

        labelErrorValiderMetier.setForeground(new java.awt.Color(255, 0, 0));

        labelErrorLibelleMetier.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                .addComponent(comboBoxDomaine, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(checkBoxDomaine))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(labelErrorValiderMetier, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 194, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(labelLibelleMetier)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(buttonEffacerMetier, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(buttonValiderMetier, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(textFieldLibelleMetier, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(labelErrorLibelleMetier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelMetier, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(buttonSupprimerMetier, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(labelErrorSupprimerMetier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(labelMetier)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxDomaine)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxDomaine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(labelErrorValiderMetier, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelErrorLibelleMetier, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelLibelleMetier)
                                .addComponent(textFieldLibelleMetier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(buttonValiderMetier)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonEffacerMetier)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSupprimerMetier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelErrorSupprimerMetier, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Métier", jPanel3);

        typeContratLabel.setText("Type de contrat");

        listTypeContrat.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listTypeContrat.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                listTypeContratFocusGained(evt);
            }
        });
        listTypeContrat.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listTypeContratValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listTypeContrat);

        buttonSupprimerTypeContrat.setText("Supprimer");
        buttonSupprimerTypeContrat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSupprimerTypeContratActionPerformed(evt);
            }
        });

        buttonEffacerTypeContrat.setText("Effacer");
        buttonEffacerTypeContrat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEffacerTypeContratActionPerformed(evt);
            }
        });

        buttonValiderTypeContrat.setText("Valider");
        buttonValiderTypeContrat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonValiderTypeContratActionPerformed(evt);
            }
        });

        labelLibelleTypeContrat.setText("Libelle :");

        labelErrorLibelleTypeContrat.setForeground(new java.awt.Color(255, 0, 0));

        labelErrorValiderTypeContrat.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(251, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(labelErrorValiderTypeContrat, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(145, 145, 145))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(labelErrorLibelleTypeContrat, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(labelErrorSupprimerTypeContrat, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(60, 60, 60)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(buttonSupprimerTypeContrat, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(typeContratLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(buttonValiderTypeContrat, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(labelLibelleTypeContrat)
                                    .addGap(18, 18, 18)
                                    .addComponent(textFieldLibelleTypeContrat, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(buttonEffacerTypeContrat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addContainerGap(250, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(labelErrorValiderTypeContrat, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelErrorLibelleTypeContrat, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                .addComponent(labelErrorSupprimerTypeContrat, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(32, 32, 32)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(70, 70, 70)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelLibelleTypeContrat)
                                .addComponent(textFieldLibelleTypeContrat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonValiderTypeContrat)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonEffacerTypeContrat))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(typeContratLabel)
                            .addGap(11, 11, 11)
                            .addComponent(jScrollPane1)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(buttonSupprimerTypeContrat)
                    .addContainerGap(161, Short.MAX_VALUE)))
        );

        tabbedPanel.addTab("Type de contrat", jPanel1);

        jScrollPane4.setViewportView(tabbedPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(624, Short.MAX_VALUE)
                .addComponent(buttonRetour, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 155, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(buttonRetour)
                .addContainerGap(357, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Click boutton Retour
    private void buttonRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRetourActionPerformed

        // On affiche l'accueil
        CardLayout cl = (CardLayout) mainJFrame.mainPanel.getLayout();
        cl.show(mainJFrame.mainPanel, "accueilCard");
    }//GEN-LAST:event_buttonRetourActionPerformed

    private void listTypeContratFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_listTypeContratFocusGained
        // TODO add your handling code here:
        // On récupère le type de contrat sélectionné
        TypeContrat tc = (TypeContrat) listTypeContrat.getSelectedValue();
        
        // Si la sélection n'est pas nulle
        if (tc != null) {
            // On rempli le textField libelle
            textFieldLibelleTypeContrat.setText(tc.getLibelle());
        }
    }//GEN-LAST:event_listTypeContratFocusGained

    /**
     * Changement de valeur dans la liste type de contrat
     * @param evt 
     */
    private void listTypeContratValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listTypeContratValueChanged
        // TODO add your handling code here:
        // On récupère le type de contrat sélectionné
        TypeContrat tc = (TypeContrat) listTypeContrat.getSelectedValue();
        
        // Si la sélection n'est pas nulle
        if (tc != null) {
            // On rempli le textField type contrat
            textFieldLibelleTypeContrat.setText(tc.getLibelle());
        }  
    }//GEN-LAST:event_listTypeContratValueChanged

    // Click boutton Supprimer de type contrat
    private void buttonSupprimerTypeContratActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSupprimerTypeContratActionPerformed
        // TODO add your handling code here:
        // On récupère le type de contrat sélectionné
        TypeContrat tc = (TypeContrat) listTypeContrat.getSelectedValue();
        
        // Liste des offres ayant ce type de contrat
        ArrayList<Offre> offres = OffreDAO.lister(mainJFrame.cnx, tc);
        
        // Si la liste est vide (pas d'offres pour ce type de contrat)
        if (offres.isEmpty()) {
            // On supprime le type de contrat de la bdd
            TypeContratDAO.supprimer(mainJFrame.cnx, tc);
            
            // Actualise la liste
            refreshListTypeContrat();
        }
        // Si liste pas vide = reste des offres pour ce type de contrats
        else {
            // Affiche l'erreur
            labelErrorSupprimerTypeContrat.setText("Suppression impossible, des offres correspondent au type de contrat");
        } 
    }//GEN-LAST:event_buttonSupprimerTypeContratActionPerformed

    // Click boutton effacer panneau type de contrat
    private void buttonEffacerTypeContratActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEffacerTypeContratActionPerformed
        // TODO add your handling code here:
        // On vide les champs
        resetTypeContrat();
    }//GEN-LAST:event_buttonEffacerTypeContratActionPerformed

    // Click boutton valider du panneau type de contrat
    private void buttonValiderTypeContratActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonValiderTypeContratActionPerformed
        // TODO add your handling code here:
        // Liste de tous les types de contrat
        ArrayList<TypeContrat> typeContrats = TypeContratDAO.lister(mainJFrame.cnx);
        
        // On récupère le libelle du type de contrat
        String libelle = textFieldLibelleTypeContrat.getText();
        
        // Si le libelle est vide
        if (libelle.equals("")) {
            // Affiche l'erreur
            labelErrorLibelleTypeContrat.setText("Veuillez saisir un libelle !");
            labelErrorValiderTypeContrat.setText("");
        }
        else {
            labelErrorLibelleTypeContrat.setText("");
            boolean exist = false;

            // Pour chaque type de contrat
            for(TypeContrat tc : typeContrats) {
                // Si ce libelle existe déjà
                if (tc.getLibelle().equalsIgnoreCase(libelle)) {
                    // Il y a erreur
                    exist = true;
                }
            }

            if (exist) {
                // Afficher erreur
                labelErrorValiderTypeContrat.setText("Ce type de contrat existe déjà !");
            }
            // Pas d'erreur -> ajout à la bdd
            else {
                TypeContrat typeC = new TypeContrat(libelle);
                try {
                    TypeContratDAO.creer(mainJFrame.cnx, typeC);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                // Actualise la liste
                refreshListTypeContrat();
                // On vide les champs
                resetTypeContrat();
            }
        }
    }//GEN-LAST:event_buttonValiderTypeContratActionPerformed

    // Click boutton valider du panneau domaine
    private void buttonValiderDomaineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonValiderDomaineActionPerformed
        // TODO add your handling code here:
        // Lisye de tous les domaines
        ArrayList<Domaine> domaines = DomaineDAO.lister(mainJFrame.cnx);
        
        // On récupère le libelle du domaine
        String libelle = textFieldLibelleDomaine.getText();
        
        // Si le libelle est vide -> on affiche l'erreur
        if (libelle.equals("")) {
            labelErrorLibelleDomaine.setText("Veuillez saisir un libelle !");
            labelErrorValiderDomaine.setText("");
        }
        // Si pas vide
        else {
            labelErrorLibelleDomaine.setText("");
            boolean exist = false;

            // pour chaque domaine on regarde si il existe déjà
            for (Domaine d : domaines) {
                if (d.getLibelle().equalsIgnoreCase(libelle)) {
                    // Domaine existant
                    exist = true;
                }
            }

            Domaine domaine = null;
            
            // Si il existe pas -> on le crée
            if (!exist) {
                domaine = new Domaine(libelle);
                try {
                    DomaineDAO.creer(mainJFrame.cnx, domaine);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                // Actualise la liste et la comboBox
                refreshListDomaine();
                refreshComboBoxDomaine();
                // Vide les champs
                resetDomaine();
            }
            // Si il existe on affiche l'erreur
            else {
                labelErrorValiderDomaine.setText("Ce domaine existe déjà !");
            }
        }
        
    }//GEN-LAST:event_buttonValiderDomaineActionPerformed

    // Click boutton supprimer du panneau domaine
    private void buttonSupprimerDomaineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSupprimerDomaineActionPerformed
        // TODO add your handling code here:
        // On récupère le domaine sélectionné
        Domaine d = (Domaine) listDomaine.getSelectedValue();
        
        // Liste des offres du domaine
        ArrayList<Offre> offres = OffreDAO.lister(mainJFrame.cnx, d);
        
        // Liste des métiers du domaine
        ArrayList<Metier> metiers = MetierDAO.lister(mainJFrame.cnx, d);
        
        // Pas d'offres ni de metiers pour ce domaine
        if (offres.isEmpty() && metiers.isEmpty()) {
            // On le supprime de la bdd
            DomaineDAO.supprimer(mainJFrame.cnx, d);
            // Actualise l liste et la comboBox
            refreshListDomaine();
            refreshComboBoxDomaine();
        }
        // Pas d'offres mais des métiers pour ce domaine
        if (offres.isEmpty() && !metiers.isEmpty()) {
            labelErrorSupprimerDomaine.setText("Suppression impossible, des métiers correspondent au domaine");
        }
        // Des offres mais pas de métiers pour ce domaine
        if (!offres.isEmpty() && metiers.isEmpty()) {
            labelErrorSupprimerDomaine.setText("Suppression impossible, des offres correspondent au domaine");
        }
        // Des offres et des métiers pour ce domaine
        if (!offres.isEmpty() && !metiers.isEmpty()) {
            labelErrorSupprimerDomaine.setText("Suppression impossible,  des offres et des métiers correspondent au domaine");
        }
    }//GEN-LAST:event_buttonSupprimerDomaineActionPerformed

    // Click boutton effacer du panneua domaine
    private void buttonEffacerDomaineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEffacerDomaineActionPerformed
        // TODO add your handling code here:
        // Vide les champs
        resetDomaine();
    }//GEN-LAST:event_buttonEffacerDomaineActionPerformed

    // Changement de valeure liste domaine
    private void listDomaineValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listDomaineValueChanged
        // TODO add your handling code here:
        // Actualise la liste métier
        refreshListMetier();
        
        // Domaine sélectionné
        Domaine d = (Domaine) listDomaine.getSelectedValue();
        if (d != null) {
            // On rempli le textField libelle du domaine
            textFieldLibelleDomaine.setText(d.getLibelle());
        }
        
    }//GEN-LAST:event_listDomaineValueChanged

    // Click boutton effacer du panneau métier
    private void buttonEffacerMetierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEffacerMetierActionPerformed
        // TODO add your handling code here:
        // Actualise la liste
        resetMetier();
        
        // Sélectionne rien
        comboBoxDomaine.setSelectedIndex(-1);
    }//GEN-LAST:event_buttonEffacerMetierActionPerformed

    // Changement de valeure de la liste métier
    private void listMetierValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listMetierValueChanged
        // TODO add your handling code here:
        // Métier selectionné
        Metier m = (Metier) listMetier.getSelectedValue();
        
        // Si selection non nulle
        if (m != null) {
            // Rempli le textField libelle du métier
            textFieldLibelleMetier.setText(m.getLibelle());
        } 
    }//GEN-LAST:event_listMetierValueChanged

    // Check box domaine changement d'état
    private void checkBoxDomaineStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkBoxDomaineStateChanged
        // TODO add your handling code here:
        // Si checkbox selectionné
        if (checkBoxDomaine.isSelected()) {
            // on affiche la comboBox
            comboBoxDomaine.setVisible(true);
        }
        // Pas selectionné
        else {
            // On cache la comboBox
            comboBoxDomaine.setVisible(false);
        }
        refreshListMetier();
    }//GEN-LAST:event_checkBoxDomaineStateChanged

    // CLick boutton supprimer du panneua métier
    private void buttonSupprimerMetierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSupprimerMetierActionPerformed
        // TODO add your handling code here:
        // Métier selectionné
        Metier m = (Metier) listMetier.getSelectedValue();
        
        // Liste des offres du métier selctionné
        ArrayList<Offre> offres = OffreDAO.lister(mainJFrame.cnx, m);
        
        // Pas d'offres associées au métier selectionné
        if (offres.isEmpty()) {
            // On supprime le métier selectionné
            MetierDAO.supprimer(mainJFrame.cnx, m);
            
            // Actualise la liste
            refreshListMetier();
        }
        // Offres associées au métier -> Erreur
        else {
            labelErrorSupprimerMetier.setText("Suppression impossible, des offres correspondent au métier");
        }  
    }//GEN-LAST:event_buttonSupprimerMetierActionPerformed

    // CLick bouton valider du panneau métier
    private void buttonValiderMetierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonValiderMetierActionPerformed
        // TODO add your handling code here:
        // Liste de tous les métiers
        ArrayList<Metier> metiers = MetierDAO.lister(mainJFrame.cnx);
        
        // On récupère le libelle du métier
        String libelle = textFieldLibelleMetier.getText();
        Domaine d = null;
        boolean exist = false;

        // Si libelle vide -> erreur
        if (libelle.equals("")) {
            labelErrorLibelleMetier.setText("Veuillez saisir un libelle !");
            labelErrorValiderMetier.setText("");
        }
        // Non vide
        else {
            labelErrorLibelleMetier.setText("");
            
            // On regarde si le métier existe déjà
            for (Metier m : metiers) {
                if (m.getLibelle().equalsIgnoreCase(libelle)) {
                    exist = true;
                }
            }
            
            // Si checkBox domaine sélectionné
            if (checkBoxDomaine.isSelected()) {
                // On récupère le domaine sélectionné dans la comboBox
                d = (Domaine) comboBoxDomaine.getSelectedItem();
            }

            // Métier existe déjà
            if (exist) {
                labelErrorValiderMetier.setText("Ce métier existe déjà !");
            }
            // Existe pas -> on l'ajoute à la bdd
            else {
                Metier metier = new Metier(libelle, d);
                MetierDAO.creer(mainJFrame.cnx, metier);
                
                // Actualise la liste
                refreshListMetier();
                // Vide les champs
                resetMetier();
            } 
        }
    }//GEN-LAST:event_buttonValiderMetierActionPerformed

    private void comboBoxDomaineItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxDomaineItemStateChanged
        // TODO add your handling code here:
        refreshListMetier();
    }//GEN-LAST:event_comboBoxDomaineItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonEffacerDomaine;
    private javax.swing.JButton buttonEffacerMetier;
    private javax.swing.JButton buttonEffacerTypeContrat;
    private javax.swing.JButton buttonRetour;
    private javax.swing.JButton buttonSupprimerDomaine;
    private javax.swing.JButton buttonSupprimerMetier;
    private javax.swing.JButton buttonSupprimerTypeContrat;
    private javax.swing.JButton buttonValiderDomaine;
    private javax.swing.JButton buttonValiderMetier;
    private javax.swing.JButton buttonValiderTypeContrat;
    private javax.swing.JCheckBox checkBoxDomaine;
    private javax.swing.JComboBox comboBoxDomaine;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel labelDomaine;
    private javax.swing.JLabel labelErrorLibelleDomaine;
    private javax.swing.JLabel labelErrorLibelleMetier;
    private javax.swing.JLabel labelErrorLibelleTypeContrat;
    private javax.swing.JLabel labelErrorSupprimerDomaine;
    private javax.swing.JLabel labelErrorSupprimerMetier;
    private javax.swing.JLabel labelErrorSupprimerTypeContrat;
    private javax.swing.JLabel labelErrorValiderDomaine;
    private javax.swing.JLabel labelErrorValiderMetier;
    private javax.swing.JLabel labelErrorValiderTypeContrat;
    private javax.swing.JLabel labelLibelleDomaine;
    private javax.swing.JLabel labelLibelleMetier;
    private javax.swing.JLabel labelLibelleTypeContrat;
    private javax.swing.JLabel labelMetier;
    private javax.swing.JList listDomaine;
    private javax.swing.JList listMetier;
    private javax.swing.JList listTypeContrat;
    private javax.swing.JTabbedPane tabbedPanel;
    private javax.swing.JTextField textFieldLibelleDomaine;
    private javax.swing.JTextField textFieldLibelleMetier;
    private javax.swing.JTextField textFieldLibelleTypeContrat;
    private javax.swing.JLabel typeContratLabel;
    // End of variables declaration//GEN-END:variables
}
