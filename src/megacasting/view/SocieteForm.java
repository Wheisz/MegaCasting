/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package megacasting.view;

import java.awt.CardLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import megacasting.MegaCasting;
import megacasting.dao.AnnonceurDAO;
import megacasting.dao.DiffuseurDAO;
import megacasting.dao.SocieteDAO;
import megacasting.entite.Adresse;
import megacasting.entite.Annonceur;
import megacasting.entite.Diffuseur;
import megacasting.entite.Societe;

/**
 *
 * @author theodore
 */
public class SocieteForm extends javax.swing.JPanel {

    private MainJFrame mainJFrame;

    // Creation d'une enumeration d'erreurs
    public enum Erreur {

        ERREUR_NUMEROSIRET_VIDE, ERREUR_NUMEROSIRET_INVALIDE, ERREUR_RAISONSOCIALE_VIDE,
        ERREUR_EMAIL_VIDE, ERREUR_EMAIL_INVALIDE,ERREUR_TELEPHONE_VIDE, ERREUR_TELEPHONE_INVALIDE, 
        ERREUR_NUMERO_VIDE, ERREUR_NUMERO_INVALIDE,ERREUR_RUE_VIDE, ERREUR_RUE_INVALIDE,
        ERREUR_CODEPOSTAL_VIDE, ERREUR_CODEPOSTAL_INVALIDE,ERREUR_VILLE_VIDE, ERREUR_VILLE_INVALIDE,
        ERREUR_ANNONCEURDIFFUSEUR_VIDE;
    }

    public SocieteForm(MainJFrame mainJFrame) {
        this.mainJFrame = mainJFrame;
        initComponents();
        DefaultListModel<Societe> societeListModel = new DefaultListModel<>();
        societeList.setModel(societeListModel);
        refreshList();

    }

    /**
     * Creates new form societeForm
     */
    public SocieteForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        raisonSocialLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        telephoneLabel = new javax.swing.JLabel();
        numeroLabel = new javax.swing.JLabel();
        rueLabel = new javax.swing.JLabel();
        codePostalLabel = new javax.swing.JLabel();
        villeLabel = new javax.swing.JLabel();
        raisonSocialeTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        telephoneTextField = new javax.swing.JTextField();
        rueTextField = new javax.swing.JTextField();
        villeTextField = new javax.swing.JTextField();
        annonceurRadioButton = new javax.swing.JRadioButton();
        diffuseurRadioButton = new javax.swing.JRadioButton();
        numeroSpinner = new javax.swing.JSpinner();
        codePostalSpinner = new javax.swing.JSpinner();
        societeSupprimerButton = new javax.swing.JButton();
        validerSocieteButton = new javax.swing.JButton();
        effacerSocieteButton = new javax.swing.JButton();
        validationLabel = new javax.swing.JLabel();
        annonceurValiderRadioButton = new javax.swing.JRadioButton();
        diffuseurValiderRadioButton = new javax.swing.JRadioButton();
        raisonSocialeErreurLabel = new javax.swing.JLabel();
        emailErreurLabel = new javax.swing.JLabel();
        numeroErreurLabel = new javax.swing.JLabel();
        rueErreurLabel = new javax.swing.JLabel();
        codePostalErreur = new javax.swing.JLabel();
        villeErreurLabel = new javax.swing.JLabel();
        telephoneErreurLabel = new javax.swing.JLabel();
        annonceurDiffuseurErreurLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        societeList = new javax.swing.JList();
        societeRadioButton = new javax.swing.JRadioButton();
        buttonAccueil = new javax.swing.JButton();
        numeroSiretLabel = new javax.swing.JLabel();
        numeroSiretErreurLabel = new javax.swing.JLabel();
        numeroSiretTextField = new javax.swing.JTextField();

        setBackground(new java.awt.Color(153, 153, 153));

        raisonSocialLabel.setForeground(new java.awt.Color(255, 255, 255));
        raisonSocialLabel.setLabelFor(raisonSocialeTextField);
        raisonSocialLabel.setText("Raison Sociale");

        emailLabel.setForeground(new java.awt.Color(255, 255, 255));
        emailLabel.setLabelFor(emailTextField);
        emailLabel.setText("Email");

        telephoneLabel.setForeground(new java.awt.Color(255, 255, 255));
        telephoneLabel.setLabelFor(telephoneTextField);
        telephoneLabel.setText("Telephone");

        numeroLabel.setForeground(new java.awt.Color(255, 255, 255));
        numeroLabel.setLabelFor(numeroSpinner);
        numeroLabel.setText("Numéro");

        rueLabel.setForeground(new java.awt.Color(255, 255, 255));
        rueLabel.setLabelFor(rueTextField);
        rueLabel.setText("Rue");

        codePostalLabel.setForeground(new java.awt.Color(255, 255, 255));
        codePostalLabel.setLabelFor(codePostalSpinner);
        codePostalLabel.setText("Code Postal");

        villeLabel.setForeground(new java.awt.Color(255, 255, 255));
        villeLabel.setLabelFor(villeTextField);
        villeLabel.setText("Ville");

        buttonGroup2.add(annonceurRadioButton);
        annonceurRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        annonceurRadioButton.setText("Annonceur");
        annonceurRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annonceurRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(diffuseurRadioButton);
        diffuseurRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        diffuseurRadioButton.setText("Diffuseur");
        diffuseurRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diffuseurRadioButtonActionPerformed(evt);
            }
        });

        societeSupprimerButton.setText("Supprimer");
        societeSupprimerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                societeSupprimerButtonActionPerformed(evt);
            }
        });

        validerSocieteButton.setText("Valider");
        validerSocieteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validerSocieteButtonActionPerformed(evt);
            }
        });

        effacerSocieteButton.setText("Effacer");
        effacerSocieteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                effacerSocieteButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(annonceurValiderRadioButton);
        annonceurValiderRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        annonceurValiderRadioButton.setText("Annonceur");

        buttonGroup1.add(diffuseurValiderRadioButton);
        diffuseurValiderRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        diffuseurValiderRadioButton.setText("Diffuseur");

        raisonSocialeErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        emailErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        numeroErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        rueErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        codePostalErreur.setForeground(new java.awt.Color(255, 0, 0));

        villeErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        telephoneErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        annonceurDiffuseurErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        societeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        societeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                selection(evt);
            }
        });
        jScrollPane1.setViewportView(societeList);

        buttonGroup2.add(societeRadioButton);
        societeRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        societeRadioButton.setText("Société");
        societeRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                societeRadioButtonActionPerformed(evt);
            }
        });

        buttonAccueil.setText("Accueil");
        buttonAccueil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAccueilActionPerformed(evt);
            }
        });

        numeroSiretLabel.setForeground(new java.awt.Color(255, 255, 255));
        numeroSiretLabel.setLabelFor(numeroSiretTextField);
        numeroSiretLabel.setText("Numéro Siret");

        numeroSiretErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(271, 271, 271)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(societeSupprimerButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(annonceurRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(diffuseurRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(societeRadioButton)))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(validationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(281, 281, 281))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(validerSocieteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(effacerSocieteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(annonceurValiderRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(raisonSocialLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(numeroSiretLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(telephoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(numeroLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(rueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(67, 67, 67))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(villeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGap(11, 11, 11)
                                                .addComponent(codePostalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(raisonSocialeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(diffuseurValiderRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(emailTextField)
                                    .addComponent(telephoneTextField)
                                    .addComponent(rueTextField)
                                    .addComponent(villeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(numeroSpinner)
                                    .addComponent(codePostalSpinner)
                                    .addComponent(numeroSiretTextField))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(numeroErreurLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                                    .addComponent(rueErreurLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                                    .addComponent(codePostalErreur, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                                    .addComponent(raisonSocialeErreurLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(emailErreurLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(telephoneErreurLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(villeErreurLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(annonceurDiffuseurErreurLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(numeroSiretErreurLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(buttonAccueil)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(validationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(numeroSiretLabel)
                                    .addComponent(numeroSiretTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(raisonSocialeErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(raisonSocialeTextField)
                                        .addComponent(raisonSocialLabel)))
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(emailLabel)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(emailErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(telephoneLabel)
                                    .addComponent(telephoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(telephoneErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(numeroLabel)
                                    .addComponent(numeroSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numeroErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rueLabel)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(rueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(rueErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(codePostalLabel)
                                    .addComponent(codePostalSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(codePostalErreur, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(villeLabel)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(villeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(villeErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(annonceurValiderRadioButton)
                                    .addComponent(diffuseurValiderRadioButton)
                                    .addComponent(annonceurDiffuseurErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addComponent(validerSocieteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(effacerSocieteButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(numeroSiretErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonAccueil)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(annonceurRadioButton)
                            .addComponent(diffuseurRadioButton)
                            .addComponent(societeRadioButton))
                        .addGap(1, 1, 1)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(societeSupprimerButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Evenement lié à la selection du radio button annonceur
    // Selection des annonceurs dans la liste de societes
    private void annonceurRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annonceurRadioButtonActionPerformed
        // TODO add your handling code here:
        // On recupere le model de la liste de societes
        DefaultListModel model = (DefaultListModel) societeList.getModel();
        model.clear();
        // Liste des societes
        ArrayList<Societe> societes = SocieteDAO.lister(mainJFrame.cnx);
        // On parcours la liste de societes
        for (Societe s : societes) {
            // On test si la societe est un annonceur
            Annonceur a = AnnonceurDAO.trouver(mainJFrame.cnx, s.getId());
            // Si oui
            if (a != null) {
                // On ajoute la societe au model
                model.addElement(s);
            }
        }
        societeList.setModel(model);
    }//GEN-LAST:event_annonceurRadioButtonActionPerformed

    // Evenement lié à la selection du radio button diffuseur
    // Selection des diffuseurs dans la liste de societes
    private void diffuseurRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diffuseurRadioButtonActionPerformed
        // TODO add your handling code here:
        // On recupere le model de la liste de societe
        DefaultListModel model = (DefaultListModel) societeList.getModel();
        model.clear();
        // Liste des societes
        ArrayList<Societe> societes = SocieteDAO.lister(mainJFrame.cnx);
        // On parcours la liste de societes
        for (Societe s : societes) {
            // On test si la societe est un diffuseur
            Diffuseur d = DiffuseurDAO.trouver(mainJFrame.cnx, s.getId());
            // Si oui 
            if (d != null) {
                // On ajoute la societe au model
                model.addElement(s);
            }
        }
        societeList.setModel(model);
    }//GEN-LAST:event_diffuseurRadioButtonActionPerformed

    // Suppression d'une societe
    private void societeSupprimerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_societeSupprimerButtonActionPerformed
        // TODO add your handling code here:
        // On recupere la scoiete selectionnée
        Societe s = (Societe) societeList.getSelectedValue();
        // On test si la societe selectionnée existe en base de données
        Societe societe = SocieteDAO.trouver(mainJFrame.cnx, s.getId());
        // Si oui 
        if (societe != null) {
            // On test si la societe est une annonceur
            Annonceur a = AnnonceurDAO.trouver(mainJFrame.cnx, societe.getId());
            // Si oui
            if (a != null) {
                // Demande de validation de suppression
                int retour = mainJFrame.affichagePopUpValidation("La suppresion de la société entraîne la suppresion des offres rattachées", "Attention");
                // Si oui
                if (retour == 0) {
                    try {
                        // Suppression de l'annonceur en base de données
                        AnnonceurDAO.supprimer(mainJFrame.cnx, a);
                        // On affiche un message confirmant la suppression de l'annonceur
                        mainJFrame.affichagePopUpInfo("Suppression de l'annonceur réussie", "Information");
                    } catch (Exception e) {
                        // On affiche un message si une erreur s'est produite lors de la suppression de l'annonceur
                        mainJFrame.affichagePopUpInfo(e.toString(), "Information");
                    }
                }
            // Si non alors c'est un diffuseur
            } else {
                // On recupere le diffuseur
                Diffuseur d = DiffuseurDAO.trouver(mainJFrame.cnx, societe.getId());
                try {
                    // On supprime le diffuseur en base de données
                    DiffuseurDAO.supprimer(mainJFrame.cnx, d);
                    // On affiche un message confirmant la suppression du diffuseur
                    mainJFrame.affichagePopUpInfo("Suppression du diffuseur réussie", "Information");
                } catch (Exception e) {
                    // On affiche un message si une erreur s'est produite lors de la suppression du diffuseur
                    mainJFrame.affichagePopUpInfo(e.toString(),"Information");
                }
            }
        }
        raz();
        refreshList();

    }//GEN-LAST:event_societeSupprimerButtonActionPerformed

    // On vide les TextFieds et les labels d'erreurs et on enleve le focus sur la derniere societe selectionnée
    private void effacerSocieteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_effacerSocieteButtonActionPerformed
        // TODO add your handling code here:
        raz();
        societeList.clearSelection();
    }//GEN-LAST:event_effacerSocieteButtonActionPerformed

    // Boutton qui permet la validation du formulaire d'une societe
    private void validerSocieteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validerSocieteButtonActionPerformed
        // TODO add your handling code here:
        // Creation d'un ArrayList qui va contenir les erreurs potentiels lors de la validation du formulaire
        ArrayList<Erreur> erreurs = verifFormulaire();
        if (erreurs.isEmpty()) {
            // Recuperation des données de la société
            long numeroSiret = Long.parseLong(numeroSiretTextField.getText());
            String raisonSociale = this.raisonSocialeTextField.getText();
            String email = this.emailTextField.getText();
            String telephone = this.telephoneTextField.getText();

            // Recuperation des données de l'adresse de la société
            int numero = (int) this.numeroSpinner.getValue();
            String rue = this.rueTextField.getText();
            int codePostal = (int) this.codePostalSpinner.getValue();
            String ville = this.villeTextField.getText();

            // Création d'un annonceur 
            if (this.annonceurValiderRadioButton.isSelected()) {
                // On verifie si un diffuseur existe avec la raison sociale choisie
                Diffuseur d = DiffuseurDAO.trouver(mainJFrame.cnx, raisonSociale);
                // Si oui alors on le supprime
                if (d != null) {
                    DiffuseurDAO.supprimer(mainJFrame.cnx, d);
                }
                // On verifie si un annonceur existe avec la raison sociale choisie
                Annonceur a = AnnonceurDAO.trouver(mainJFrame.cnx, raisonSociale);

                // Si l'annonceur n'existe pas
                if (a == null) {
                    // On instancie une nouvelle adresse avec les informations du formulaire
                    Adresse adresse = new Adresse(numero, rue, codePostal, ville);
                    // On instancie un annonceur avec les informations du formaulaire et l'adresse 
                    a = new Annonceur(numeroSiret,raisonSociale, email, telephone, adresse);

                    try {
                        // On crée l'annonceur en base de données
                        AnnonceurDAO.creer(mainJFrame.cnx, a);
                        // On affiche un message confirmant la création de l'annonceur
                        mainJFrame.affichagePopUpInfo("L'annonceur a été crée", "Information");
                    } catch (Exception e) {
                        // On affiche l'erreur si la création a échoué
                        mainJFrame.affichagePopUpInfo(e.toString(), "Erreur");
                    }
                } else {
                    // Si l'annonceur existe , alors on va le modifier
                    // On modifie les informations sur l'annonceur
                    a.setNumeroSiret(numeroSiret);
                    a.setRaisonSociale(raisonSociale);
                    a.setEmail(email);
                    a.setTelephone(telephone);

                    Adresse adresse = a.getAdresse();
                    adresse.setNumero(numero);
                    adresse.setRue(rue);
                    adresse.setCodePostal(codePostal);
                    adresse.setVille(ville);
                    try {
                        // On modifie l'annonceur en base de données
                        AnnonceurDAO.modifier(mainJFrame.cnx, a);
                        // On affiche un message confirmant la modification de l'annonceur
                        mainJFrame.affichagePopUpInfo("L'annonceur a été modifié", "Information");
                    } catch (Exception ex) {
                        mainJFrame.affichagePopUpInfo(ex.toString(), "Information");
                    }
                }
            } else {
                // Si on définit la société comme un diffuseur
                if (this.diffuseurValiderRadioButton.isSelected()) {
                    // On verifie si un annonceur existe avec la raison sociale choisie
                    Annonceur a = AnnonceurDAO.trouver(mainJFrame.cnx, raisonSociale);
                    // Si l'annonceur existe alors on le supprime
                    if (a != null) {
                        AnnonceurDAO.supprimer(mainJFrame.cnx, a);
                    }
                    // On verifie si la société est déjà identifié comme un diffuseur
                    Diffuseur d = DiffuseurDAO.trouver(mainJFrame.cnx, raisonSociale);

                    // Si le diffuseur n'existe pas
                    if (d == null) {
                        // On instancie une nouvelle adresse avec les informations du formulaire
                        Adresse adresse = new Adresse(numero, rue, codePostal, ville);
                        // On instancie un nouveau diffuseur avec les informations du formulaire et l'adresse 
                        d = new Diffuseur(numeroSiret, raisonSociale, email, telephone, adresse);

                        try {
                            // On crée le diffuseur en base de données
                            DiffuseurDAO.creer(mainJFrame.cnx, d);
                            // On affiche si la création s'est bien réalisé
                            mainJFrame.affichagePopUpInfo("Le diffuseur a été crée", "Information");
                        } catch (Exception e) {
                            // On affiche si une erreur s'est produite lors de la création du diffuseur
                            mainJFrame.affichagePopUpInfo(e.toString(), "Information");
                        }
                    } else {
                        // Si le diffuseur existe , alors on va le modifier
                        // On modifie les informations sur le diffuseur
                        d.setNumeroSiret(numeroSiret);
                        d.setRaisonSociale(raisonSociale);
                        d.setEmail(email);
                        d.setTelephone(telephone);

                        Adresse adresse = d.getAdresse();
                        adresse.setNumero(numero);
                        adresse.setRue(rue);
                        adresse.setCodePostal(codePostal);
                        adresse.setVille(ville);
                        try {
                            // On enregistre les modifications du diffuseur en base de données
                            DiffuseurDAO.modifier(mainJFrame.cnx, d);
                            // On affiche la confirmation de la modification du diffuseur
                            mainJFrame.affichagePopUpInfo("Le diffuseur a été modifié", "Information");
                        } catch (Exception ex) {
                            // On affiche un message si une erreur s'est produite lors de la modification du diffuseur
                            mainJFrame.affichagePopUpInfo(ex.toString(), "Information");
                        }
                    }
                }
            }
            raz();
            refreshList();
        } else {
            affichageErreurs(erreurs);
        }


    }//GEN-LAST:event_validerSocieteButtonActionPerformed

    // Evenement lors de la selection d'une societe
    private void selection(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_selection
        // TODO add your handling code here:
        Societe s = (Societe) societeList.getSelectedValue();
        if (s != null) {
            this.numeroSiretTextField.setText(String.valueOf(s.getNumeroSiret()));
            this.raisonSocialeTextField.setText(s.getRaisonSociale());
            this.emailTextField.setText(s.getEmail());
            this.telephoneTextField.setText(s.getTelephone());
            this.numeroSpinner.setValue(s.getAdresse().getNumero());
            this.rueTextField.setText(s.getAdresse().getRue());
            this.codePostalSpinner.setValue(s.getAdresse().getCodePostal());
            this.villeTextField.setText(s.getAdresse().getVille());

            Annonceur a = AnnonceurDAO.trouver(mainJFrame.cnx, s.getId());
            if (a != null) {
                this.annonceurValiderRadioButton.setSelected(true);
            } else {
                this.diffuseurValiderRadioButton.setSelected(true);
            }
        }


    }//GEN-LAST:event_selection

    // Evenement lié à la selection du radio button societe
    // Permet d'afficher l'ensemble des societes
    private void societeRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_societeRadioButtonActionPerformed
        // TODO add your handling code here:
        // On recupere le model de la liste de societes
        DefaultListModel model = (DefaultListModel) societeList.getModel();
        model.clear();
        // On recupere la liste de toutes les societes
        ArrayList<Societe> societes = SocieteDAO.lister(mainJFrame.cnx);
        // On parcours la liste des societes
        for (Societe s : societes) {
            // On ajoute la societe au model
            model.addElement(s);
        }
        societeList.setModel(model);
    }//GEN-LAST:event_societeRadioButtonActionPerformed

    // Boutton qui permet de revenir à l'accueil
    private void buttonAccueilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAccueilActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) mainJFrame.mainPanel.getLayout();
        cl.show(mainJFrame.mainPanel, "accueilCard");
    }//GEN-LAST:event_buttonAccueilActionPerformed
    
    // Permet de rafraichir la List de la page
    private void refreshList() {
        DefaultListModel<Societe> model = (DefaultListModel<Societe>) societeList.getModel();
        model.clear();
        // Liste des societes
        ArrayList<Societe> societes = SocieteDAO.lister(mainJFrame.cnx);
        // On parcours la liste des societes
        for (Societe s : societes) {
            // On ajoute la societe au model
            model.addElement(s);
        }
        societeList.setModel(model);

    }

    // Vide les TextFiels et les labels d'erreurs du formulaire d'une societe
    private void raz() {
        this.numeroSiretTextField.setText(null);
        this.raisonSocialeTextField.setText(null);
        this.emailTextField.setText(null);
        this.telephoneTextField.setText(null);
        this.numeroSpinner.setValue(0);
        this.rueTextField.setText(null);
        this.codePostalSpinner.setValue(0);
        this.villeTextField.setText(null);
        this.validationLabel.setText(null);

        this.numeroSiretErreurLabel.setText(null);
        this.raisonSocialeErreurLabel.setText(null);
        this.emailErreurLabel.setText(null);
        this.telephoneErreurLabel.setText(null);
        this.numeroErreurLabel.setText(null);
        this.rueErreurLabel.setText(null);
        this.codePostalErreur.setText(null);
        this.villeErreurLabel.setText(null);
        this.annonceurDiffuseurErreurLabel.setText(null);

        this.buttonGroup1.clearSelection();
    }

    // Verification du formulaire d'une societe et renvoie un ArrayList null si aucune erreur
    private ArrayList verifFormulaire() {

        ArrayList<Erreur> erreurs = new ArrayList();

        // Creation d'une erreur si le numero de siret est vide
        if (this.numeroSiretTextField.getText().equals("")){
            erreurs.add(Erreur.ERREUR_NUMEROSIRET_VIDE);
        } else {
            // Creation d'une erreur si le numero de siret saisi est incorrect
            String numeroSiret = this.numeroSiretTextField.getText();
            Boolean verifNumeroSiret = regexNumeroSiret(numeroSiret);
            if(verifNumeroSiret){
                this.numeroSiretErreurLabel.setText(null);
            } else {
                erreurs.add(Erreur.ERREUR_NUMEROSIRET_INVALIDE);
            }
        }
        // Creation d'une erreur si la raison sociale est vide
        if (this.raisonSocialeTextField.getText().equals("")) {
            erreurs.add(Erreur.ERREUR_RAISONSOCIALE_VIDE);
        } else {
            this.raisonSocialeErreurLabel.setText(null);
        }
        // Creation d'une erreur si l'email est vide
        if (this.emailTextField.getText().equals("")) {
            erreurs.add(Erreur.ERREUR_EMAIL_VIDE);
        } else {
            // Creation d'une erreur si l'email saisi est incorrect
            String email = this.emailTextField.getText();
            Boolean verifEmail = regexEmail(email);
            if (verifEmail) {
                this.emailErreurLabel.setText(null);
            } else {
                erreurs.add(Erreur.ERREUR_EMAIL_INVALIDE);
            }
        }
        // Creation d'une erreur si le numero de téléphone est vide
        if (this.telephoneTextField.getText().equals("")) {
            erreurs.add(Erreur.ERREUR_TELEPHONE_VIDE);
        } else {
            // Creation d'une erreur si le numero de téléphone saisi est incorrect
            String telephone = this.telephoneTextField.getText();
            Boolean verifTelephone = regexTelephone(telephone);
            if (verifTelephone) {
                this.telephoneErreurLabel.setText(null);
            } else {
                erreurs.add(Erreur.ERREUR_TELEPHONE_INVALIDE);
            }
        }
        // Creation d'une erreur si le numéro de rue est égale à 0
        if ((int) this.numeroSpinner.getValue() == 0) {
            erreurs.add(Erreur.ERREUR_NUMERO_VIDE);
        } else {
            this.numeroErreurLabel.setText(null);
        }
        // Creation d'une erreur si le nom de rue est vide
        if (this.rueTextField.getText().equals("")) {
            erreurs.add(Erreur.ERREUR_RUE_VIDE);
        } else {
            // Creation d'une erreur si le nom de rue est incorrect
            String rue = this.rueTextField.getText();
            Boolean verifRue = regexRue(rue);
            if (verifRue) {
                this.rueErreurLabel.setText(null);
            } else {
                erreurs.add(Erreur.ERREUR_RUE_INVALIDE);
            }
        }
        // Creation d'une erreur si le code postal est égale à 0
        if ((int) this.codePostalSpinner.getValue() == 0) {
            erreurs.add(Erreur.ERREUR_CODEPOSTAL_VIDE);
        } else {
            // Creation d'une erreur si le code postal saisi est incorrect
            int codePostalTemp = (int) this.codePostalSpinner.getValue();
            String codePostal = Integer.toString(codePostalTemp);
            Boolean verifCodePostal = regexCodePostal(codePostal);
            if (verifCodePostal) {
                this.codePostalErreur.setText(null);
            } else {
                erreurs.add(Erreur.ERREUR_CODEPOSTAL_INVALIDE);
            }
        }
        // Creation d'une erreur si le nom de la ville est vide
        if (this.villeTextField.getText().equals("")) {
            erreurs.add(Erreur.ERREUR_VILLE_VIDE);
        } else {
            // Creation d'une erreur si le nom de la ville est incorrect
            String ville = this.villeTextField.getText();
            Boolean verifVille = regexVille(ville);
            if (verifVille) {
                this.villeErreurLabel.setText(null);
            } else {
                erreurs.add(Erreur.ERREUR_VILLE_INVALIDE);
            }
        }
        // Creation d'une erreur si la societe est ni annonceur et ni diffuseur
        if ((!this.annonceurValiderRadioButton.isSelected()) && (!this.diffuseurValiderRadioButton.isSelected())) {
            erreurs.add(Erreur.ERREUR_ANNONCEURDIFFUSEUR_VIDE);
        } else {
            this.annonceurDiffuseurErreurLabel.setText(null);
        }

        return erreurs;

    }

    // Affiche dans les labels d'erreurs les erreurs rencontrés
    private void affichageErreurs(ArrayList<Erreur> erreurs) {

        for (Erreur erreur : erreurs) {
            switch (erreur) {
                case ERREUR_NUMEROSIRET_VIDE:
                    this.numeroSiretErreurLabel.setText("Veuillez saisir un numéro de Siret !");
                    break;
                case ERREUR_NUMEROSIRET_INVALIDE:
                    this.numeroSiretErreurLabel.setText("Veuillez saisir un numéro de Siret de 14 chiffres !");
                    break;
                case ERREUR_RAISONSOCIALE_VIDE:
                    this.raisonSocialeErreurLabel.setText("Veuillez saisir une raison sociale !");
                    break;
                case ERREUR_EMAIL_VIDE:
                    this.emailErreurLabel.setText("Veuillez saisir un email !");
                    break;
                case ERREUR_EMAIL_INVALIDE:
                    this.emailErreurLabel.setText("Veuillez saisir un email valide !");
                    break;
                case ERREUR_TELEPHONE_VIDE:
                    this.telephoneErreurLabel.setText("Veuillez saisir un numéro de téléphone !");
                    break;
                case ERREUR_TELEPHONE_INVALIDE:
                    this.telephoneErreurLabel.setText("Veuillez saisir un numéro de téléphone à 10 chiffres !");
                    break;
                case ERREUR_NUMERO_VIDE:
                    this.numeroErreurLabel.setText("Veuillez saisir un numéro supérieur à 0 !");
                    break;
                case ERREUR_RUE_VIDE:
                    this.rueErreurLabel.setText("Veuillez saisir un nom de rue !");
                    break;
                case ERREUR_RUE_INVALIDE:
                    this.rueErreurLabel.setText("Veuillez saisir un nom de rue valide !");
                    break;
                case ERREUR_CODEPOSTAL_VIDE:
                    this.codePostalErreur.setText("Veuillez saisir un code postal !");
                    break;
                case ERREUR_CODEPOSTAL_INVALIDE:
                    this.codePostalErreur.setText("Veuillez saisir un code postal à 5 chiffres !");
                    break;
                case ERREUR_VILLE_VIDE:
                    this.villeErreurLabel.setText("Veuillez saisir un nom de ville !");
                    break;
                case ERREUR_ANNONCEURDIFFUSEUR_VIDE:
                    this.annonceurDiffuseurErreurLabel.setText("Veuillez choisir soit un annonceur ou un diffuseur !");
                    break;
                default:
                    break;
            }
        }

    }
    
    private Boolean regexNumeroSiret(String numeroSiret){
        Pattern p = Pattern.compile("^[0-9]{14}$");
        Matcher m = p.matcher(numeroSiret);
        Boolean b = m.matches();

        return b;  
    }

    private Boolean regexTelephone(String telephone) {
        Pattern p = Pattern.compile("^0[1-68]([.-]?[0-9]{2}){4}$");
        Matcher m = p.matcher(telephone);
        Boolean b = m.matches();

        return b;
    }

    private Boolean regexEmail(String email) {
        Pattern p = Pattern.compile("^[a-z0-9._-]+@[a-z0-9._-]{2,}\\.[a-z]{2,4}$");
        Matcher m = p.matcher(email);
        Boolean b = m.matches();

        return b;
    }

    private Boolean regexRue(String rue) {
        Pattern p = Pattern.compile("^[a-zA-Z ]+$");
        Matcher m = p.matcher(rue);
        Boolean b = m.matches();

        return b;
    }

    private Boolean regexCodePostal(String codePostal) {
        Pattern p = Pattern.compile("^[0-9]{5}$");
        Matcher m = p.matcher(codePostal);
        Boolean b = m.matches();

        return b;
    }

    private Boolean regexVille(String ville) {
        Pattern p = Pattern.compile("^[a-zA-Z- ]+$");
        Matcher m = p.matcher(ville);
        Boolean b = m.matches();

        return b;
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel annonceurDiffuseurErreurLabel;
    private javax.swing.JRadioButton annonceurRadioButton;
    private javax.swing.JRadioButton annonceurValiderRadioButton;
    private javax.swing.JButton buttonAccueil;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel codePostalErreur;
    private javax.swing.JLabel codePostalLabel;
    private javax.swing.JSpinner codePostalSpinner;
    private javax.swing.JRadioButton diffuseurRadioButton;
    private javax.swing.JRadioButton diffuseurValiderRadioButton;
    private javax.swing.JButton effacerSocieteButton;
    private javax.swing.JLabel emailErreurLabel;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel numeroErreurLabel;
    private javax.swing.JLabel numeroLabel;
    private javax.swing.JLabel numeroSiretErreurLabel;
    private javax.swing.JLabel numeroSiretLabel;
    private javax.swing.JTextField numeroSiretTextField;
    private javax.swing.JSpinner numeroSpinner;
    private javax.swing.JLabel raisonSocialLabel;
    private javax.swing.JLabel raisonSocialeErreurLabel;
    private javax.swing.JTextField raisonSocialeTextField;
    private javax.swing.JLabel rueErreurLabel;
    private javax.swing.JLabel rueLabel;
    private javax.swing.JTextField rueTextField;
    private javax.swing.JList societeList;
    private javax.swing.JRadioButton societeRadioButton;
    private javax.swing.JButton societeSupprimerButton;
    private javax.swing.JLabel telephoneErreurLabel;
    private javax.swing.JLabel telephoneLabel;
    private javax.swing.JTextField telephoneTextField;
    private javax.swing.JLabel validationLabel;
    private javax.swing.JButton validerSocieteButton;
    private javax.swing.JLabel villeErreurLabel;
    private javax.swing.JLabel villeLabel;
    private javax.swing.JTextField villeTextField;
    // End of variables declaration//GEN-END:variables
}
