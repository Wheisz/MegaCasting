/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package megacasting.view;

import java.awt.CardLayout;
import java.util.Date;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import megacasting.dao.AnnonceurDAO;
import megacasting.dao.DomaineDAO;
import megacasting.dao.MetierDAO;
import megacasting.dao.OffreDAO;
import megacasting.dao.TypeContratDAO;
import megacasting.entite.Annonceur;
import megacasting.entite.Domaine;
import megacasting.entite.Metier;
import megacasting.entite.Offre;
import megacasting.entite.TypeContrat;

/**
 *
 * @author theodore
 */
public class OffreForm extends javax.swing.JPanel {
    
    private MainJFrame mainJFrame;

    // Creation d'une enumeration d'erreurs
    public enum Erreur {
        
        ERREUR_INTITULE_VIDE, ERREUR_REFERENCE_VIDE, ERREUR_REFERENCE_INVALIDE, ERREUR_REFERENCE_EXISTANT,
        ERREUR_DUREEDIFFUSION_VIDE, ERREUR_DATEDEBUTCONTRAT_VIDE, ERREUR_DATEDEBUTCONTRAT_INVALIDE,
        ERREUR_NBPOSTE_VIDE, ERREUR_LATTITUDE_VIDE, ERREUR_LATTITUDE_INVALIDE, ERREUR_LONGITUDE_VIDE,
        ERREUR_LONGITUDE_INVALIDE, ERREUR_DESCRIPTIONPOSTE_VIDE, ERREUR_DESCRIPTIONPROFIL_VIDE,
        ERREUR_TELEPHONE_VIDE, ERREUR_TELEPHONE_INVALIDE, ERREUR_EMAIL_VIDE, ERREUR_EMAIL_INVALIDE,
         ERREUR_IDANNONCEUR_VIDE, ERREUR_DOMAINE_METIER_VIDE;
    }
    
    public OffreForm(MainJFrame mainJFrame) {
        this.mainJFrame = mainJFrame;
        initComponents();
        DefaultListModel<Annonceur> annonceurListModel = new DefaultListModel<>();
        annonceurList.setModel(annonceurListModel);
        DefaultListModel<Domaine> domaineListModel = new DefaultListModel<>();
        domaineList.setModel(domaineListModel);
        DefaultListModel<Metier> metierListModel = new DefaultListModel<>();
        metierList.setModel(metierListModel);
        DefaultListModel<TypeContrat> typeContratListModel = new DefaultListModel<>();
        typeContratList.setModel(typeContratListModel);
        DefaultListModel<Offre> offreListModel = new DefaultListModel<>();
        offreList.setModel(offreListModel);
        
        DefaultComboBoxModel<Annonceur> annonceurComboBoxModel = new DefaultComboBoxModel<>();
        annonceurOffreComboBox.setModel(annonceurComboBoxModel);
        DefaultComboBoxModel<Domaine> domaineComboBoxModel = new DefaultComboBoxModel<>();
        domaineOffreComboBox.setModel(domaineComboBoxModel);
        DefaultComboBoxModel<Metier> metierComboBoxModel = new DefaultComboBoxModel<>();
        metierOffreComboBox.setModel(metierComboBoxModel);
        DefaultComboBoxModel<TypeContrat> typeContratComboBoxModel = new DefaultComboBoxModel<>();
        typeContratOffreComboBox.setModel(typeContratComboBoxModel);
        
        this.datePublicationLabel.setVisible(false);
        this.datePublicationTextField.setVisible(false);
        
        refreshList();
        refreshComboBox();
        
    }

    /**
     * Creates new form offreForm
     */
    public OffreForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        accueilButton = new javax.swing.JButton();
        domaineLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        domaineList = new javax.swing.JList();
        metierLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        metierList = new javax.swing.JList();
        annonceurLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        annonceurList = new javax.swing.JList();
        typeContratLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        typeContratList = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        offreList = new javax.swing.JList();
        intituleLabel = new javax.swing.JLabel();
        intituleTextField = new javax.swing.JTextField();
        referenceLabel = new javax.swing.JLabel();
        referenceTextField = new javax.swing.JTextField();
        datePublicationLabel = new javax.swing.JLabel();
        dureeDiffusionLabel = new javax.swing.JLabel();
        dureeDiffusionSpinner = new javax.swing.JSpinner();
        dateDebutContratLabel = new javax.swing.JLabel();
        nbPosteLabel = new javax.swing.JLabel();
        nbPosteSpinner = new javax.swing.JSpinner();
        latitudeLabel = new javax.swing.JLabel();
        lattitudeTextField = new javax.swing.JTextField();
        LongitudeLabel = new javax.swing.JLabel();
        longitudeTextField = new javax.swing.JTextField();
        descriptionPosteLabel = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        descriptionPosteTextArea = new javax.swing.JTextArea();
        descriptionProfilLabel = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        descriptionProfilTextArea = new javax.swing.JTextArea();
        telephoneLabel = new javax.swing.JLabel();
        telephoneTextField = new javax.swing.JTextField();
        emailLabel = new javax.swing.JLabel();
        emailTextField = new javax.swing.JTextField();
        dateDebutContratDateChooser = new com.toedter.calendar.JDateChooser();
        domaineOffreLabel = new javax.swing.JLabel();
        metierOffreLabel = new javax.swing.JLabel();
        domaineOffreComboBox = new javax.swing.JComboBox();
        metierOffreComboBox = new javax.swing.JComboBox();
        typeContratOffreLabel = new javax.swing.JLabel();
        annonceurOffreLabel = new javax.swing.JLabel();
        typeContratOffreComboBox = new javax.swing.JComboBox();
        annonceurOffreComboBox = new javax.swing.JComboBox();
        validerOffreButton = new javax.swing.JButton();
        validationLabel = new javax.swing.JLabel();
        effacerOffreButton = new javax.swing.JButton();
        intituleErreurLabel = new javax.swing.JLabel();
        referenceErreurLabel = new javax.swing.JLabel();
        dureeDiffusionErreurLabel = new javax.swing.JLabel();
        dateDebutContratErreurLabel = new javax.swing.JLabel();
        nbPosteErreurLabel = new javax.swing.JLabel();
        lattitudeErreurLabel = new javax.swing.JLabel();
        longitudeErreurLabel = new javax.swing.JLabel();
        descriptionPosteErreurLabel = new javax.swing.JLabel();
        descriptionProfilErreurLabel = new javax.swing.JLabel();
        emailErreurLabel = new javax.swing.JLabel();
        telephoneErreurLabel = new javax.swing.JLabel();
        annonceurErreurLabel = new javax.swing.JLabel();
        reinitialiserButton = new javax.swing.JButton();
        supprimerOffreButton = new javax.swing.JButton();
        domaineMetierErreurLabel = new javax.swing.JLabel();
        datePublicationTextField = new javax.swing.JTextField();
        estValideRadioButton = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        estValideErreurLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 153, 153));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Offre");

        accueilButton.setText("Accueil");
        accueilButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accueilButtonActionPerformed(evt);
            }
        });

        domaineLabel.setForeground(new java.awt.Color(255, 255, 255));
        domaineLabel.setText("Domaine");

        domaineList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        domaineList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                selectionDomaine(evt);
            }
        });
        jScrollPane1.setViewportView(domaineList);

        metierLabel.setForeground(new java.awt.Color(255, 255, 255));
        metierLabel.setText("MÃ©tier");

        metierList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        metierList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                selectionMetier(evt);
            }
        });
        jScrollPane2.setViewportView(metierList);

        annonceurLabel.setForeground(new java.awt.Color(255, 255, 255));
        annonceurLabel.setText("Annonceurs");

        annonceurList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        annonceurList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                selectionAnnonceur(evt);
            }
        });
        jScrollPane3.setViewportView(annonceurList);

        typeContratLabel.setForeground(new java.awt.Color(255, 255, 255));
        typeContratLabel.setText("Type de Contrat");

        typeContratList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        typeContratList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                selectionTypeContrat(evt);
            }
        });
        jScrollPane4.setViewportView(typeContratList);

        offreList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                selectionOffre(evt);
            }
        });
        jScrollPane5.setViewportView(offreList);

        intituleLabel.setForeground(new java.awt.Color(255, 255, 255));
        intituleLabel.setText("Intitule");

        referenceLabel.setForeground(new java.awt.Color(255, 255, 255));
        referenceLabel.setText("RÃ©fÃ©rence");

        datePublicationLabel.setForeground(new java.awt.Color(255, 255, 255));
        datePublicationLabel.setText("Date de la publication");

        dureeDiffusionLabel.setForeground(new java.awt.Color(255, 255, 255));
        dureeDiffusionLabel.setText("DurÃ©e de la diffusion");

        dateDebutContratLabel.setForeground(new java.awt.Color(255, 255, 255));
        dateDebutContratLabel.setText("Date de dÃ©but du contrat");

        nbPosteLabel.setForeground(new java.awt.Color(255, 255, 255));
        nbPosteLabel.setText("Nombre de poste(s)");

        latitudeLabel.setForeground(new java.awt.Color(255, 255, 255));
        latitudeLabel.setText("Latitude");

        LongitudeLabel.setForeground(new java.awt.Color(255, 255, 255));
        LongitudeLabel.setText("Longitude");

        descriptionPosteLabel.setForeground(new java.awt.Color(255, 255, 255));
        descriptionPosteLabel.setText("Description du poste");

        descriptionPosteTextArea.setColumns(20);
        descriptionPosteTextArea.setRows(5);
        jScrollPane6.setViewportView(descriptionPosteTextArea);

        descriptionProfilLabel.setForeground(new java.awt.Color(255, 255, 255));
        descriptionProfilLabel.setText("Description du profil");

        descriptionProfilTextArea.setColumns(20);
        descriptionProfilTextArea.setRows(5);
        jScrollPane7.setViewportView(descriptionProfilTextArea);

        telephoneLabel.setForeground(new java.awt.Color(255, 255, 255));
        telephoneLabel.setText("TÃ©lÃ©phone");

        emailLabel.setForeground(new java.awt.Color(255, 255, 255));
        emailLabel.setText("Email");

        domaineOffreLabel.setForeground(new java.awt.Color(255, 255, 255));
        domaineOffreLabel.setText("Domaine");

        metierOffreLabel.setForeground(new java.awt.Color(255, 255, 255));
        metierOffreLabel.setText("MÃ©tier");

        domaineOffreComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                domaineOffreComboBoxActionPerformed(evt);
            }
        });

        typeContratOffreLabel.setForeground(new java.awt.Color(255, 255, 255));
        typeContratOffreLabel.setText("Type de Contrat");

        annonceurOffreLabel.setForeground(new java.awt.Color(255, 255, 255));
        annonceurOffreLabel.setText("Annonceur");

        validerOffreButton.setText("Valider");
        validerOffreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validerOffreButtonActionPerformed(evt);
            }
        });

        effacerOffreButton.setText("Effacer");
        effacerOffreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                effacerOffreButtonActionPerformed(evt);
            }
        });

        intituleErreurLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        intituleErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        referenceErreurLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        referenceErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        dureeDiffusionErreurLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        dureeDiffusionErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        dateDebutContratErreurLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        dateDebutContratErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        nbPosteErreurLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        nbPosteErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        lattitudeErreurLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lattitudeErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        longitudeErreurLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        longitudeErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        descriptionPosteErreurLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        descriptionPosteErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        descriptionProfilErreurLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        descriptionProfilErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        emailErreurLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        emailErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        telephoneErreurLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        telephoneErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        annonceurErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        reinitialiserButton.setText("RÃ©initialiser");
        reinitialiserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reinitialiserButtonActionPerformed(evt);
            }
        });

        supprimerOffreButton.setText("Supprimer");
        supprimerOffreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimerOffreButtonActionPerformed(evt);
            }
        });

        domaineMetierErreurLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        domaineMetierErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        datePublicationTextField.setFocusable(false);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Est Valide ");

        estValideErreurLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(domaineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(annonceurLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(metierLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeContratLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reinitialiserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(supprimerOffreButton, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(metierOffreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(domaineOffreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nbPosteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                    .addComponent(LongitudeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(latitudeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(intituleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(referenceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(datePublicationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dureeDiffusionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dateDebutContratLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(77, 77, 77)
                                                .addComponent(validationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(metierOffreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(longitudeErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(domaineOffreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(dureeDiffusionErreurLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(referenceTextField)
                                                .addComponent(intituleTextField)
                                                .addComponent(intituleErreurLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(referenceErreurLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(datePublicationTextField)
                                                .addComponent(dureeDiffusionSpinner)
                                                .addComponent(dateDebutContratDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                                                .addComponent(lattitudeErreurLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(longitudeTextField))
                                            .addComponent(domaineMetierErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(estValideRadioButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(estValideErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(nbPosteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lattitudeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(dateDebutContratErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(nbPosteErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(descriptionPosteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(descriptionPosteErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(annonceurOffreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(annonceurErreurLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(annonceurOffreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                        .addComponent(typeContratOffreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(typeContratOffreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(telephoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGap(43, 43, 43)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(telephoneErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(emailTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                                                                .addComponent(telephoneTextField)
                                                                .addComponent(emailErreurLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(descriptionProfilLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(descriptionProfilErreurLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE))))
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(effacerOffreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(validerOffreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(accueilButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(92, 92, 92))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(domaineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(intituleLabel)
                                    .addComponent(intituleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(intituleErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(referenceLabel)
                                            .addComponent(referenceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(descriptionPosteLabel)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(referenceErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(datePublicationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(datePublicationLabel))
                                .addGap(12, 12, 12))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(descriptionPosteErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(dureeDiffusionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dureeDiffusionLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dureeDiffusionErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateDebutContratLabel)
                                    .addComponent(dateDebutContratDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateDebutContratErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nbPosteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nbPosteLabel)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(descriptionProfilLabel)
                                        .addGap(61, 61, 61))
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(descriptionProfilErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nbPosteErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(telephoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(telephoneLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lattitudeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(latitudeLabel))
                            .addComponent(telephoneErreurLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(emailLabel)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lattitudeErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(longitudeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(LongitudeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(emailErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addComponent(longitudeErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(domaineOffreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(domaineOffreLabel)
                            .addComponent(typeContratOffreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeContratOffreLabel))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(metierOffreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(metierOffreLabel)
                            .addComponent(annonceurOffreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(annonceurOffreLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(annonceurErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(domaineMetierErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(estValideRadioButton)
                                    .addComponent(estValideErreurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(effacerOffreButton)
                                    .addComponent(validerOffreButton)
                                    .addComponent(accueilButton)))
                            .addComponent(jLabel2))
                        .addGap(12, 12, 12)
                        .addComponent(validationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(metierLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(annonceurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(typeContratLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reinitialiserButton)
                            .addComponent(supprimerOffreButton)))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Boutton pour retourner au menu accueil
    private void accueilButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accueilButtonActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) mainJFrame.mainPanel.getLayout();
        cl.show(mainJFrame.mainPanel, "accueilCard");
    }//GEN-LAST:event_accueilButtonActionPerformed

    // Evenement liÃ© Ã  la selection d'un domaine dans la liste des domaines
    private void selectionDomaine(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_selectionDomaine
        // TODO add your handling code here:

        metierList.clearSelection();
        typeContratList.clearSelection();
        annonceurList.clearSelection();

        // On recupere le domaine qu'on a selectionnÃ©
        Domaine d = (Domaine) domaineList.getSelectedValue();
        // On recupere le model de la liste des metiers
        DefaultListModel model = (DefaultListModel) metierList.getModel();
        model.clear();
        // On recupere le model de la liste des offres
        DefaultListModel modelOffre = (DefaultListModel) offreList.getModel();
        modelOffre.clear();
        
        if (d != null) {
            // Liste des metiers
            ArrayList<Metier> metiers = MetierDAO.lister(mainJFrame.cnx, d);
            // Parcours la liste des metiers
            for (Metier m : metiers) {
                // Ajout au model si le metier est different de null
                if (m != null) {
                    model.addElement(m);
                }
            }
            metierList.setModel(model);

            // Liste des offres en fonction de l'annonceur
            ArrayList<Offre> offres = OffreDAO.lister(mainJFrame.cnx, d, null);
            // On parcours la liste des offres
            for (Offre o : offres) {
                // On ajoute l'offre au model
                modelOffre.addElement(o);
            }
            offreList.setModel(modelOffre);
        } else {
            refreshListMetiers();
        }
    }//GEN-LAST:event_selectionDomaine

    // Evenement liÃ© Ã  la selection d'une offre dans la liste des offres
    private void selectionOffre(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_selectionOffre
        // TODO add your handling code here:
        razErreurs();
        // On recupere l'offre qu'on a selectionnÃ© 
        Offre o = (Offre) offreList.getSelectedValue();
        // On rempli le formulaire avec les informations de l'offre selectionnÃ©, si elle est different de null
        if (o != null) {
            this.intituleTextField.setText(o.getIntitule());
            this.referenceTextField.setText(o.getReference());
            this.datePublicationLabel.setVisible(true);
            this.datePublicationTextField.setVisible(true);
            this.datePublicationTextField.setText(String.valueOf(o.getDatePublication()));
            this.dureeDiffusionSpinner.setValue(o.getDureeDiffusion());
            this.dateDebutContratDateChooser.setDate(o.getDateDebutContrat());
            this.nbPosteSpinner.setValue(o.getNbPoste());
            this.lattitudeTextField.setText(o.getLocalisationLattitude());
            this.longitudeTextField.setText(o.getLocalisationLongitude());
            this.descriptionPosteTextArea.setText(o.getDescriptionPoste());
            this.descriptionProfilTextArea.setText(o.getDescriptionProfil());
            this.telephoneTextField.setText(o.getTelephone());
            this.emailTextField.setText(o.getEmail());
            if(o.isEstValide()== true){
                this.estValideRadioButton.setSelected(true);
            }else{
                this.estValideRadioButton.setSelected(false);
            }
            
            this.typeContratOffreComboBox.setSelectedItem(o.getTypeContrat());
            this.domaineOffreComboBox.setSelectedItem(o.getDomaine());
            this.annonceurOffreComboBox.setSelectedItem(o.getAnnonceur());
            this.metierOffreComboBox.setSelectedItem(o.getMetier());
            
        }

    }//GEN-LAST:event_selectionOffre

    // Boutton de validation du formulaire d'une offre
    private void validerOffreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validerOffreButtonActionPerformed
        // TODO add your handling code here:

        long id = 0;
        // On recupere l'offre si on la selectionne dans la liste
        Offre oTemp = (Offre) offreList.getSelectedValue();
        if (oTemp != null) {
            // On stocke l'id de l'offre
            id = oTemp.getId();
        }

        //Creation d'un ArrayList qui va contenir les erreurs potentiels liÃ© au formulaire
        ArrayList<Erreur> erreurs = verifFormulaire();
        // Si aucune erreur est trouvÃ©e
        if (erreurs.isEmpty()) {
            // On stocke les differentes informations de l'offre
            String intitule = this.intituleTextField.getText();
            String reference = this.referenceTextField.getText();
            int dureeDiffusion = (int) this.dureeDiffusionSpinner.getValue();
            Date dateDebutContrat = this.dateDebutContratDateChooser.getDate();
            int nbPoste = (int) this.nbPosteSpinner.getValue();
            String lattitude = this.lattitudeTextField.getText();
            String longitude = this.longitudeTextField.getText();
            String descriptionPoste = this.descriptionPosteTextArea.getText();
            String descriptionProfil = this.descriptionProfilTextArea.getText();
            String telephone = this.telephoneTextField.getText();
            String email = this.emailTextField.getText();
            boolean estValide = false;
            if( this.estValideRadioButton.isSelected() ){
                estValide = true;
            }else{
                estValide = false;
            }
            Domaine domaine = (Domaine) this.domaineOffreComboBox.getSelectedItem();
            Metier metier = (Metier) this.metierOffreComboBox.getSelectedItem();
            TypeContrat typeContrat = (TypeContrat) this.typeContratOffreComboBox.getSelectedItem();
            Annonceur annonceur = (Annonceur) this.annonceurOffreComboBox.getSelectedItem();
            // On teste si l'offre est deja en base de donnÃ©es
            Offre o = OffreDAO.trouver(mainJFrame.cnx, id);
            // Si oui 
            if (o == null) {
                // On effectue une deuxieme verfication du formulaire plus poussÃ©e
                erreurs = verifFormulaireCreation();
                // Si aucune erreur
                if (erreurs.isEmpty()) {
                    try {
                        // On instancie une nouvelle offre
                        o = new Offre(intitule, reference, dureeDiffusion,
                                dateDebutContrat, nbPoste, lattitude, longitude, descriptionPoste, descriptionProfil,
                                telephone, email,estValide, domaine, metier, typeContrat, annonceur);
                        // On crÃ©e l'offre en base de donnÃ©es
                        OffreDAO.creer(mainJFrame.cnx, o);
                        // On affiche un message confirmant la crÃ©ation de l'offre
                        mainJFrame.affichagePopUpInfo("Offre crÃ©e", "Information");
                    } catch (Exception e) {
                        // On affiche un message si une erreur est intervenue lors de la creation de l'offre
                        mainJFrame.affichagePopUpInfo(e.toString(), "Erreur");
                    }
                    // On vide les TextField du formulaire de l'offre
                    raz();
                    // On rafraichie la liste des offres
                    refreshList();
                // Sinon on affiche les erreurs
                } else {
                    affichageErreurs(erreurs);
                }
                // Si non    
            } else {
                // On recupere l'offre tel qu'elle etait avant la modification
                Offre offreOld = OffreDAO.trouver(mainJFrame.cnx, id);
                // On effectue une deuxieme verification du formaulaire plus poussÃ©e
                erreurs = verifFormulaireModification(offreOld);
                // Si aucune erreur
                if (erreurs.isEmpty()) {
                    // On modfie les informations de l'offre
                    o.setIntitule(intitule);
                    o.setReference(reference);
                    o.setDureeDiffusion(dureeDiffusion);
                    o.setDateDebutContrat(dateDebutContrat);
                    o.setNbPoste(nbPoste);
                    o.setLocalisationLattitude(lattitude);
                    o.setLocalisationLongitude(longitude);
                    o.setDescriptionPoste(descriptionPoste);
                    o.setDescriptionProfil(descriptionProfil);
                    o.setTelephone(telephone);
                    o.setEmail(email);
                    o.setEstValide(estValide);
                    o.setDomaine(domaine);
                    o.setMetier(metier);
                    o.setTypeContrat(typeContrat);
                    o.setAnnonceur(annonceur);
                    try {
                        // On enregistre les modifications de l'offre en base de donnÃ©es
                        OffreDAO.modifier(mainJFrame.cnx, o);
                        // On affiche un message confirmant la modification de l'offre
                        mainJFrame.affichagePopUpInfo("Offre modifiÃ©e", "Information");
                    } catch (Exception ex) {
                        // On affiche un message si une erreur est intervenue lors de la modification de l'offre
                        mainJFrame.affichagePopUpInfo(ex.toString(), "Information");
                    }
                    // On vide les TextField du formulaire de l'offre
                    raz();
                    // On rafraichie la liste des offres
                    refreshList();
                // Sinon on affiche les erreurs
                } else {
                    affichageErreurs(erreurs);
                }
            }
        } else {
            // On affiche les erreurs liÃ©s Ã  la validation du formulaire
            affichageErreurs(erreurs);
        }

    }//GEN-LAST:event_validerOffreButtonActionPerformed

    // Boutton pour effacer le formulaire et clear le focus de la liste d'offres
    private void effacerOffreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_effacerOffreButtonActionPerformed
        // TODO add your handling code here:
        raz();
        // On eneleve le focus sur la derniÃ¨re offre selectionnÃ©e
        offreList.clearSelection();
    }//GEN-LAST:event_effacerOffreButtonActionPerformed

    // ComboBox de domaines de metiers qui influence la ComboBox de metiers
    private void domaineOffreComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_domaineOffreComboBoxActionPerformed
        // TODO add your handling code here:
        // On recupere le model de la ComboBox des domaines de metiers
        DefaultComboBoxModel model = (DefaultComboBoxModel) domaineOffreComboBox.getModel();
        // Si un domaine a Ã©tÃ© choisi
        if ((Domaine) model.getSelectedItem() != null) {
            // On stocke le domaine choisi
            Domaine d = (Domaine) model.getSelectedItem();
            // Liste des metiers
            ArrayList<Metier> metiers = MetierDAO.lister(mainJFrame.cnx, d);
            // On recupere le model de la ComboBox des metiers
            DefaultComboBoxModel modelMetier = (DefaultComboBoxModel) metierOffreComboBox.getModel();
            modelMetier.removeAllElements();
            // On parcours la liste des metiers
            for (Metier m : metiers) {
                // On ajoute le metier au model de la ComboBox des metiers
                modelMetier.addElement(m);
            }
            // On ajoute un Ã©lÃ©ment null 
            modelMetier.addElement(null);
            metierOffreComboBox.setModel(modelMetier);
            // Si le domaine est null
        } else {
            // Liste des metiers
            ArrayList<Metier> metiers = MetierDAO.lister(mainJFrame.cnx, null);
            // On recupere le model de la ComboBox des metiers
            DefaultComboBoxModel modelMetier = (DefaultComboBoxModel) metierOffreComboBox.getModel();
            modelMetier.removeAllElements();
            // On parcours la liste de metiers
            for (Metier m : metiers) {
                // On ajoute le metier au model de la ComboBox des metiers
                modelMetier.addElement(m);
            }
            // On ajoute un element null
            modelMetier.addElement(null);
            metierOffreComboBox.setModel(modelMetier);
        }
    }//GEN-LAST:event_domaineOffreComboBoxActionPerformed

    // Evenement liÃ© Ã  la selection d'un annonceur de la liste des annonceurs
    private void selectionAnnonceur(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_selectionAnnonceur
        // TODO add your handling code here:

        metierList.clearSelection();
        domaineList.clearSelection();
        typeContratList.clearSelection();

        // On recupere l'annonceur selectionnÃ©
        Annonceur a = (Annonceur) annonceurList.getSelectedValue();
        // On recupere le model de la liste des offres
        DefaultListModel modelOffre = (DefaultListModel) offreList.getModel();
        modelOffre.clear();
        
        if (a != null) {
            // Liste des offres en fonction de l'annonceur
            ArrayList<Offre> offres = OffreDAO.lister(mainJFrame.cnx, a);
            // On parcours la liste des offres
            for (Offre o : offres) {
                // On ajoute l'offre au model
                modelOffre.addElement(o);
            }
            offreList.setModel(modelOffre);
        }
    }//GEN-LAST:event_selectionAnnonceur

    // Evenement liÃ© Ã  la selection d'un type de contrat de la liste des types de contrats
    private void selectionTypeContrat(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_selectionTypeContrat
        // TODO add your handling code here:

        // On dÃ©selectionne les autres list
        metierList.clearSelection();
        domaineList.clearSelection();
        annonceurList.clearSelection();

        // On recupere le type de contrat selctionnÃ©
        TypeContrat tc = (TypeContrat) typeContratList.getSelectedValue();
        // On recupere le model de la liste des offres
        DefaultListModel modelOffre = (DefaultListModel) offreList.getModel();
        modelOffre.clear();
        
        if (tc != null) {
            // Liste des offres en fonction du type de contrat
            ArrayList<Offre> offres = OffreDAO.lister(mainJFrame.cnx, tc);
            // On parcours la liste des offres
            for (Offre o : offres) {
                // On ajoute l'offre au model
                modelOffre.addElement(o);
            }
            offreList.setModel(modelOffre);
        }
    }//GEN-LAST:event_selectionTypeContrat

    // Boutton qui enleve le focus des List de la fonction recherhce
    private void reinitialiserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reinitialiserButtonActionPerformed
        // TODO add your handling code here: 

        metierList.clearSelection();
        domaineList.clearSelection();
        typeContratList.clearSelection();
        annonceurList.clearSelection();
        offreList.clearSelection();
        // On refresh la list des offres
        refreshListOffres();
        // On clear le formulaire
        raz();


    }//GEN-LAST:event_reinitialiserButtonActionPerformed

    // Evenement liÃ© Ã  la selection d'un metier de la liste des metiers
    private void selectionMetier(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_selectionMetier
        // TODO add your handling code here:

        typeContratList.clearSelection();
        annonceurList.clearSelection();

        // On recupere le metier selectionnÃ©
        Metier m = (Metier) metierList.getSelectedValue();
        // On recupere le model de la liste des offres
        DefaultListModel modelOffre = (DefaultListModel) offreList.getModel();
        modelOffre.clear();
        // Liste des offres en fonction du metier
        ArrayList<Offre> offres = OffreDAO.lister(mainJFrame.cnx, m);
        // On parcours la listes des offres
        for (Offre o : offres) {
            // Ajout de l'offre au model
            modelOffre.addElement(o);
        }
        offreList.setModel(modelOffre);
    }//GEN-LAST:event_selectionMetier

    // Boutton qui permet la suppresion d'une offre dans la liste des offres
    private void supprimerOffreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimerOffreButtonActionPerformed
        // TODO add your handling code here:
        // Demande de confirmation de la suppression de l'offre
        int retour = mainJFrame.affichagePopUpValidation("Etes-vous sÃ»r de vouloir supprimer l'offre ?", "Information");

        //Si oui 
        if (retour == 0) {
            // On recupere l'offre selectionnÃ©e
            Offre o = (Offre) offreList.getSelectedValue();
            // On test si l'offre existe en base de donnÃ©es
            Offre offre = OffreDAO.trouver(mainJFrame.cnx, o.getId());
            // Si elle existe
            if (offre != null) {
                try {
                    // On supprime l'offre en base de donnÃ©es
                    OffreDAO.supprimer(mainJFrame.cnx, offre);
                    // On affiche un message confirmant la suppression de l'offre
                    mainJFrame.affichagePopUpInfo("Suppression de l'offre rÃ©ussie", "Information");
                } catch (Exception e) {
                    // On affiche un message si une erreur s'est produite lors de la suppression de l'offre
                    mainJFrame.affichagePopUpInfo(e.toString(), "Information");
                }
                raz();
                refreshList();
            }
            
        }
    }//GEN-LAST:event_supprimerOffreButtonActionPerformed

    // Permet le refresh de l'ensemble des JList et des comboBox de la page
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        refreshList();
        refreshComboBox();
    }//GEN-LAST:event_formComponentShown

    // Vide les TextFiels du formulaire de l'offre
    private void raz() {
        this.intituleTextField.setText(null);
        this.referenceTextField.setText(null);
        this.datePublicationLabel.setVisible(false);
        this.datePublicationTextField.setVisible(false);
        this.dureeDiffusionSpinner.setValue(0);
        this.dateDebutContratDateChooser.setDate(null);
        this.nbPosteSpinner.setValue(0);
        this.lattitudeTextField.setText(null);
        this.longitudeTextField.setText(null);
        this.descriptionPosteTextArea.setText(null);
        this.descriptionProfilTextArea.setText(null);
        this.telephoneTextField.setText(null);
        this.emailTextField.setText(null);
        this.estValideRadioButton.setSelected(false);

    }
    
    // Vide les labels d'erreurs du formulaire de l'offre
    private void razErreurs(){
        
        this.intituleErreurLabel.setText(null);
        this.referenceErreurLabel.setText(null);
        this.dureeDiffusionErreurLabel.setText(null);
        this.dateDebutContratErreurLabel.setText(null);
        this.nbPosteErreurLabel.setText(null);
        this.lattitudeErreurLabel.setText(null);
        this.longitudeErreurLabel.setText(null);
        this.descriptionPosteErreurLabel.setText(null);
        this.descriptionProfilErreurLabel.setText(null);
        this.telephoneErreurLabel.setText(null);
        this.emailErreurLabel.setText(null);
        this.estValideErreurLabel.setText(null);
        this.annonceurErreurLabel.setText(null);
    }

    // Permet de rafraichir l'ensemble des List de la page
    private void refreshList() {
        refreshListAnnonceurs();
        refreshListDomaines();
        refreshListMetiers();
        refreshListTypeContrat();
        refreshListOffres();
    }

    // Liste des offres
    private void refreshListOffres() {
        
        DefaultListModel model = (DefaultListModel) offreList.getModel();
        model.clear();
        // Liste de toutes les offres
        ArrayList<Offre> offres = OffreDAO.lister(mainJFrame.cnx);
        // On parcours la liste d'offres
        for (Offre o : offres) {
            // On ajoute l'offre au model
            model.addElement(o);
        }
        offreList.setModel(model);
        
    }

    // Liste des annonceurs
    private void refreshListAnnonceurs() {
        DefaultListModel model = (DefaultListModel) annonceurList.getModel();
        model.clear();
        // Liste des annonceurs
        ArrayList<Annonceur> annonceurs = AnnonceurDAO.lister(mainJFrame.cnx);
        // On parcours la liste des annonceurs
        for (Annonceur a : annonceurs) {
            // On ajoute l'annonceur au model
            model.addElement(a);
        }
        annonceurList.setModel(model);
        
    }

    // Liste des domaines de metiers
    private void refreshListDomaines() {
        DefaultListModel model = (DefaultListModel) domaineList.getModel();
        model.clear();
        // Liste des domaines de metiers
        ArrayList<Domaine> domaines = DomaineDAO.lister(mainJFrame.cnx);
        // On parcours la liste des domaines
        for (Domaine d : domaines) {
            // On ajoute le domaine au model
            model.addElement(d);
        }
        domaineList.setModel(model);
        
    }

    // Liste des metiers
    private void refreshListMetiers() {
        DefaultListModel model = (DefaultListModel) metierList.getModel();
        model.clear();
        // Liste des metiers
        ArrayList<Metier> metiers = MetierDAO.lister(mainJFrame.cnx, null);
        // On parcours la liste des metiers
        for (Metier m : metiers) {
            // On ajoute le metier au model
            model.addElement(m);
        }
        metierList.setModel(model);
        
    }

    // Liste des types de contrats
    private void refreshListTypeContrat() {
        DefaultListModel model = (DefaultListModel) typeContratList.getModel();
        model.clear();
        // Liste des types de contrats
        ArrayList<TypeContrat> typeContrats = TypeContratDAO.lister(mainJFrame.cnx);
        // On parcours la liste des types de contrats
        for (TypeContrat tc : typeContrats) {
            // On ajoute le type de contrat au model
            model.addElement(tc);
        }
        typeContratList.setModel(model);
        
    }

    // Permet de rafraichir l'ensemble des ComboBox de la page
    private void refreshComboBox() {
        refreshComboBoxAnnonceurs();
        refreshComboBoxDomaines();
        refreshComboBoxTypeContrats();
    }

    // ComboBox des annonceurs
    private void refreshComboBoxAnnonceurs() {
        DefaultComboBoxModel<Annonceur> model = (DefaultComboBoxModel) annonceurOffreComboBox.getModel();
        model.removeAllElements();
        // Liste des annonceurs
        ArrayList<Annonceur> annonceurs = AnnonceurDAO.lister(mainJFrame.cnx);
        // On parcours la liste des annonceurs
        for (Annonceur a : annonceurs) {
            // On ajoute l'annonceur au model
            model.addElement(a);
        }
        annonceurOffreComboBox.setModel(model);
    }

    // ComboBox des domaines de metiers
    private void refreshComboBoxDomaines() {
        DefaultComboBoxModel<Domaine> model = (DefaultComboBoxModel) domaineOffreComboBox.getModel();
        model.removeAllElements();
        // Liste des domaines de metiers
        ArrayList<Domaine> domaines = DomaineDAO.lister(mainJFrame.cnx);
        // On parcours la liste des domaines de metiers
        for (Domaine d : domaines) {
            // On ajoute le domaine au model
            model.addElement(d);
        }
        model.addElement(null);
        domaineOffreComboBox.setModel(model);
    }

    // ComboBox des types de contrats
    private void refreshComboBoxTypeContrats() {
        DefaultComboBoxModel<TypeContrat> model = (DefaultComboBoxModel) typeContratOffreComboBox.getModel();
        model.removeAllElements();
        // Liste des types de contrats
        ArrayList<TypeContrat> typeContrats = TypeContratDAO.lister(mainJFrame.cnx);
        // On parcours la liste des types de contrats
        for (TypeContrat tc : typeContrats) {
            // On ajoute le type de contrat au model
            model.addElement(tc);
        }
        typeContratOffreComboBox.setModel(model);
    }

    // Verification du formulaire d'une offre et renvoie un ArrayList null si aucune erreur
    private ArrayList verifFormulaire() {
        
        ArrayList<Erreur> erreurs = new ArrayList();

        // Creation d'une erreur si le champ intitule est vide
        if (this.intituleTextField.getText().equals("")) {
            erreurs.add(Erreur.ERREUR_INTITULE_VIDE);
        } else {
            this.intituleErreurLabel.setText(null);
        }
        // Creation d'une erreur si le champ reference est vide
        if (this.referenceTextField.getText().equals("")) {
            erreurs.add(Erreur.ERREUR_REFERENCE_VIDE);
        } else {
            // Creation d'une erreur si le champ reference a Ã©tÃ© mal saisi
            Boolean verifReference = mainJFrame.regexReference(this.referenceTextField.getText());
            if (verifReference != true) {
                erreurs.add(Erreur.ERREUR_REFERENCE_INVALIDE);
            } else {
                this.referenceErreurLabel.setText(null);
            }
        }
        // Creation d'une erreur si la durÃ©e de diffusion est Ã©gale Ã  0
        if ((int) this.dureeDiffusionSpinner.getValue() <= 0) {
            erreurs.add(Erreur.ERREUR_DUREEDIFFUSION_VIDE);
        } else {
            this.dureeDiffusionErreurLabel.setText(null);
        }
        // Creation d'une erreur si la date de dÃ©but de contrat est vide 
        if (this.dateDebutContratDateChooser.getDate() == null) {
            erreurs.add(Erreur.ERREUR_DATEDEBUTCONTRAT_VIDE);
        } else {
            Date now = new Date();
            // Creation d'une erreur si la date de debut de oontrat est infÃ©rieure Ã  celle de publication
            if (this.dateDebutContratDateChooser.getDate().before(now)) {
                erreurs.add(Erreur.ERREUR_DATEDEBUTCONTRAT_INVALIDE);
            } else {
                this.dateDebutContratErreurLabel.setText(null);
            }
        }
        // Creation d'une erreur si le nombre de postes est Ã©gale Ã  0
        if ((int) this.nbPosteSpinner.getValue() <= 0) {
            erreurs.add(Erreur.ERREUR_NBPOSTE_VIDE);
        } else {
            this.nbPosteErreurLabel.setText(null);
        }
        // Creation d'une erreur si la lattitude est vide 
        if (this.lattitudeTextField.getText().equals("")) {
            erreurs.add(Erreur.ERREUR_LATTITUDE_VIDE);
        } else {
            // Creation d'une erreur si la lattitude saisie est incorrect
            Boolean verifLattitude = mainJFrame.regexCoordonnees(this.lattitudeTextField.getText());
            if (verifLattitude != true) {
                erreurs.add(Erreur.ERREUR_LATTITUDE_INVALIDE);
            } else {
                this.lattitudeErreurLabel.setText(null);
            }
        }
        // Creation d'une erreur si la longitude est vide 
        if (this.longitudeTextField.getText().equals("")) {
            erreurs.add(Erreur.ERREUR_LONGITUDE_VIDE);
        } else {
            // Creation d'une erreur si la longitude saisie est incorrect
            Boolean verifLongitude = mainJFrame.regexCoordonnees(this.longitudeTextField.getText());
            if (verifLongitude != true) {
                erreurs.add(Erreur.ERREUR_LONGITUDE_INVALIDE);
            } else {
                this.longitudeErreurLabel.setText(null);
            }
        }
        // Creation d'une erreur si la description de poste est vide 
        if (this.descriptionPosteTextArea.getText().equals("")) {
            erreurs.add(Erreur.ERREUR_DESCRIPTIONPOSTE_VIDE);
        } else {
            this.descriptionPosteErreurLabel.setText(null);
        }
        // Creation d'une erreur si la description du profil est vide
        if (this.descriptionProfilTextArea.getText().equals("")) {
            erreurs.add(Erreur.ERREUR_DESCRIPTIONPROFIL_VIDE);
        } else {
            this.descriptionProfilErreurLabel.setText(null);
        }
        // Creation d'une erreur si le numÃ©ro de tÃ©lÃ©phone est vide
        if (this.telephoneTextField.getText().equals("")) {
            erreurs.add(Erreur.ERREUR_TELEPHONE_VIDE);
        } else {
            // Creation d'une erreur si le numÃ©ro de tÃ©lÃ©phone saisi est incorrect
            Boolean verifTelephone = mainJFrame.regexTelephone(this.telephoneTextField.getText());
            if (verifTelephone != true) {
                erreurs.add(Erreur.ERREUR_TELEPHONE_INVALIDE);
            } else {
                this.telephoneErreurLabel.setText(null);
            }
        }
        // Creation d'une erreur si l'email est vide
        if (this.emailTextField.getText().equals("")) {
            erreurs.add(Erreur.ERREUR_EMAIL_VIDE);
        } else {
            // Creation d'une erreur si l'email saisie est incorrect 
            Boolean verifEmail = mainJFrame.regexEmail(this.emailTextField.getText());
            if (verifEmail != true) {
                erreurs.add(Erreur.ERREUR_EMAIL_INVALIDE);
            } else {
                this.emailErreurLabel.setText(null);
            }
        }
        // Creation d'une erreur si aucun annonceur Ã  Ã©tÃ© choisi
        if (this.annonceurOffreComboBox.getSelectedItem() == null) {
            erreurs.add(Erreur.ERREUR_IDANNONCEUR_VIDE);
        } else {
            this.annonceurErreurLabel.setText(null);
        }
        if ((this.domaineOffreComboBox.getSelectedItem() == null) & (this.metierOffreComboBox.getSelectedItem() == null)) {
            erreurs.add(Erreur.ERREUR_DOMAINE_METIER_VIDE);
        }
        return erreurs;
        
    }

    // Verification plus pousÃ©e du formulaire d'une offre lors de la crÃ©ation
    // et renvoie un ArrayList null si aucune erreur
    private ArrayList verifFormulaireCreation() {
        // Creation d'un tableau d'erreurs
        ArrayList<Erreur> erreurs = new ArrayList();

        // On stocke la reference de l'offre qu'on souhaite crÃ©e
        String reference = this.referenceTextField.getText();
        // On verifie si elle n'existe pas dÃ©jÃ 
        Offre o = OffreDAO.trouver(mainJFrame.cnx, reference);
        //Si oui
        if (o == null) {
            // On affiche rien
            this.referenceErreurLabel.setText(null);
        } else {
            // On stocke l'erreur correspondante
            erreurs.add(Erreur.ERREUR_REFERENCE_EXISTANT);
        }        
        return erreurs;
    }

    // Verification plus pousÃ©e du formulaire d'une offre lors de la modification
    // et renvoie un ArrayList null si aucune erreur
    private ArrayList verifFormulaireModification(Offre offre) {
        // Creation  d'un tableau d'erreur
        ArrayList<Erreur> erreurs = new ArrayList();

        // On stocke l'ancienne reference et lea nouvelle de l'offre
        String referenceOld = String.valueOf(offre.getReference());
        String referenceNew = this.referenceTextField.getText();

        // On teste si ils sont differents
        if (!referenceNew.equals(referenceOld)) {
            // Si oui, on test si une offre ne possede pas dÃ©jÃ  cette reference
            Offre o = OffreDAO.trouver(mainJFrame.cnx, referenceNew);
            // Si non
            if (o == null) {
                // On affiche rien
                this.referenceErreurLabel.setText(null);
            } else {
                // Sinon, on stocke l'erreur correspondante
                erreurs.add(Erreur.ERREUR_REFERENCE_EXISTANT);
            }
        }
        return erreurs;
    }

    // Affiche dans les labels d'erreurs les erreurs rencontrÃ©s
    private void affichageErreurs(ArrayList<Erreur> erreurs) {
        
        for (Erreur erreur : erreurs) {
            switch (erreur) {
                
                case ERREUR_INTITULE_VIDE:
                    this.intituleErreurLabel.setText("Veuillez saisir un intitulÃ© !");
                    break;
                case ERREUR_REFERENCE_VIDE:
                    this.referenceErreurLabel.setText("Veuillez saisir une rÃ©fÃ©rence !");
                    break;
                case ERREUR_REFERENCE_INVALIDE:
                    this.referenceErreurLabel.setText("Veuillez saisir une rÃ©fÃ©rence correcte !");
                    break;
                case ERREUR_REFERENCE_EXISTANT:
                    this.referenceErreurLabel.setText("Une offre possÃ¨de dÃ©jÃ  cette rÃ©fÃ©rence !");
                    break;
                case ERREUR_DUREEDIFFUSION_VIDE:
                    this.dureeDiffusionErreurLabel.setText("Veuillez saisir une durÃ©e de diffusion supÃ©rieure Ã  0 !");
                    break;
                case ERREUR_DATEDEBUTCONTRAT_VIDE:
                    this.dateDebutContratErreurLabel.setText("Veuillez saisir une date de dÃ©but de contrat !");
                    break;
                case ERREUR_DATEDEBUTCONTRAT_INVALIDE:
                    this.dateDebutContratErreurLabel.setText("La date saisie est infÃ©rieure Ã  celle d\'aujourdh'hui !");
                    break;
                case ERREUR_NBPOSTE_VIDE:
                    this.nbPosteErreurLabel.setText("Veuillez saisir le nombre de postes pour l'offre !");
                    break;
                case ERREUR_LATTITUDE_VIDE:
                    this.lattitudeErreurLabel.setText("Veuillez saisir une lattitude !");
                    break;
                case ERREUR_LATTITUDE_INVALIDE:
                    this.lattitudeErreurLabel.setText("Veuillez saisir une lattitude correcte : 00Â° 00' N !");
                    break;
                case ERREUR_LONGITUDE_VIDE:
                    this.longitudeErreurLabel.setText("Veuillez saisir une longitude !");
                    break;
                case ERREUR_LONGITUDE_INVALIDE:
                    this.longitudeErreurLabel.setText("Veuillez saisir une longitude correcte : 00Â° 00' N !");
                    break;
                case ERREUR_DESCRIPTIONPOSTE_VIDE:
                    this.descriptionPosteErreurLabel.setText("Veuillez saisir une description de poste !");
                    break;
                case ERREUR_DESCRIPTIONPROFIL_VIDE:
                    this.descriptionProfilErreurLabel.setText("Veuillez saisir une description de profil !");
                    break;
                case ERREUR_TELEPHONE_VIDE:
                    this.telephoneErreurLabel.setText("Veuillez saisir un numÃ©ro de tÃ©lÃ©phone !");
                    break;
                case ERREUR_TELEPHONE_INVALIDE:
                    this.telephoneErreurLabel.setText("Veuillez saisir une numÃ©ro de tÃ©lÃ©phone de 10 chiffres !");
                    break;
                case ERREUR_EMAIL_VIDE:
                    this.emailErreurLabel.setText("Veuillez saisir un email !");
                    break;
                case ERREUR_EMAIL_INVALIDE:
                    this.emailErreurLabel.setText("Veuillez saisir un email correct !");
                    break;
                case ERREUR_IDANNONCEUR_VIDE:
                    this.annonceurErreurLabel.setText("Veuillez choisir un annonceur pour votre offre !");
                    break;
                case ERREUR_DOMAINE_METIER_VIDE:
                    this.domaineMetierErreurLabel.setText("Veuillez choisir soit un domaine ou un mÃ©tier !");
                    break;
                default:
                    break;
                
            }
            
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LongitudeLabel;
    private javax.swing.JButton accueilButton;
    private javax.swing.JLabel annonceurErreurLabel;
    private javax.swing.JLabel annonceurLabel;
    private javax.swing.JList annonceurList;
    private javax.swing.JComboBox annonceurOffreComboBox;
    private javax.swing.JLabel annonceurOffreLabel;
    private com.toedter.calendar.JDateChooser dateDebutContratDateChooser;
    private javax.swing.JLabel dateDebutContratErreurLabel;
    private javax.swing.JLabel dateDebutContratLabel;
    private javax.swing.JLabel datePublicationLabel;
    private javax.swing.JTextField datePublicationTextField;
    private javax.swing.JLabel descriptionPosteErreurLabel;
    private javax.swing.JLabel descriptionPosteLabel;
    private javax.swing.JTextArea descriptionPosteTextArea;
    private javax.swing.JLabel descriptionProfilErreurLabel;
    private javax.swing.JLabel descriptionProfilLabel;
    private javax.swing.JTextArea descriptionProfilTextArea;
    private javax.swing.JLabel domaineLabel;
    private javax.swing.JList domaineList;
    private javax.swing.JLabel domaineMetierErreurLabel;
    private javax.swing.JComboBox domaineOffreComboBox;
    private javax.swing.JLabel domaineOffreLabel;
    private javax.swing.JLabel dureeDiffusionErreurLabel;
    private javax.swing.JLabel dureeDiffusionLabel;
    private javax.swing.JSpinner dureeDiffusionSpinner;
    private javax.swing.JButton effacerOffreButton;
    private javax.swing.JLabel emailErreurLabel;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JLabel estValideErreurLabel;
    private javax.swing.JRadioButton estValideRadioButton;
    private javax.swing.JLabel intituleErreurLabel;
    private javax.swing.JLabel intituleLabel;
    private javax.swing.JTextField intituleTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel latitudeLabel;
    private javax.swing.JLabel lattitudeErreurLabel;
    private javax.swing.JTextField lattitudeTextField;
    private javax.swing.JLabel longitudeErreurLabel;
    private javax.swing.JTextField longitudeTextField;
    private javax.swing.JLabel metierLabel;
    private javax.swing.JList metierList;
    private javax.swing.JComboBox metierOffreComboBox;
    private javax.swing.JLabel metierOffreLabel;
    private javax.swing.JLabel nbPosteErreurLabel;
    private javax.swing.JLabel nbPosteLabel;
    private javax.swing.JSpinner nbPosteSpinner;
    private javax.swing.JList offreList;
    private javax.swing.JLabel referenceErreurLabel;
    private javax.swing.JLabel referenceLabel;
    private javax.swing.JTextField referenceTextField;
    private javax.swing.JButton reinitialiserButton;
    private javax.swing.JButton supprimerOffreButton;
    private javax.swing.JLabel telephoneErreurLabel;
    private javax.swing.JLabel telephoneLabel;
    private javax.swing.JTextField telephoneTextField;
    private javax.swing.JLabel typeContratLabel;
    private javax.swing.JList typeContratList;
    private javax.swing.JComboBox typeContratOffreComboBox;
    private javax.swing.JLabel typeContratOffreLabel;
    private javax.swing.JLabel validationLabel;
    private javax.swing.JButton validerOffreButton;
    // End of variables declaration//GEN-END:variables
}
